
Motor_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f5c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800506c  0800506c  0000606c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050a8  080050a8  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080050a8  080050a8  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050a8  080050a8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050a8  080050a8  000060a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050ac  080050ac  000060ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080050b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000000c  080050bc  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080050bc  0000723c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d85a  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002013  00000000  00000000  0001488f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  000168a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad3  00000000  00000000  00017660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018395  00000000  00000000  00018133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f31b  00000000  00000000  000304c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f5f4  00000000  00000000  0003f7e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cedd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c14  00000000  00000000  000cee1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000d2a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005054 	.word	0x08005054

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08005054 	.word	0x08005054

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	@ 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__gesf2>:
 8000bf8:	f04f 3cff 	mov.w	ip, #4294967295
 8000bfc:	e006      	b.n	8000c0c <__cmpsf2+0x4>
 8000bfe:	bf00      	nop

08000c00 <__lesf2>:
 8000c00:	f04f 0c01 	mov.w	ip, #1
 8000c04:	e002      	b.n	8000c0c <__cmpsf2+0x4>
 8000c06:	bf00      	nop

08000c08 <__cmpsf2>:
 8000c08:	f04f 0c01 	mov.w	ip, #1
 8000c0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c1c:	bf18      	it	ne
 8000c1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c22:	d011      	beq.n	8000c48 <__cmpsf2+0x40>
 8000c24:	b001      	add	sp, #4
 8000c26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c2a:	bf18      	it	ne
 8000c2c:	ea90 0f01 	teqne	r0, r1
 8000c30:	bf58      	it	pl
 8000c32:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c36:	bf88      	it	hi
 8000c38:	17c8      	asrhi	r0, r1, #31
 8000c3a:	bf38      	it	cc
 8000c3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c40:	bf18      	it	ne
 8000c42:	f040 0001 	orrne.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c4c:	d102      	bne.n	8000c54 <__cmpsf2+0x4c>
 8000c4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c52:	d105      	bne.n	8000c60 <__cmpsf2+0x58>
 8000c54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c58:	d1e4      	bne.n	8000c24 <__cmpsf2+0x1c>
 8000c5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c5e:	d0e1      	beq.n	8000c24 <__cmpsf2+0x1c>
 8000c60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_cfrcmple>:
 8000c68:	4684      	mov	ip, r0
 8000c6a:	4608      	mov	r0, r1
 8000c6c:	4661      	mov	r1, ip
 8000c6e:	e7ff      	b.n	8000c70 <__aeabi_cfcmpeq>

08000c70 <__aeabi_cfcmpeq>:
 8000c70:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c72:	f7ff ffc9 	bl	8000c08 <__cmpsf2>
 8000c76:	2800      	cmp	r0, #0
 8000c78:	bf48      	it	mi
 8000c7a:	f110 0f00 	cmnmi.w	r0, #0
 8000c7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c80 <__aeabi_fcmpeq>:
 8000c80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c84:	f7ff fff4 	bl	8000c70 <__aeabi_cfcmpeq>
 8000c88:	bf0c      	ite	eq
 8000c8a:	2001      	moveq	r0, #1
 8000c8c:	2000      	movne	r0, #0
 8000c8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c92:	bf00      	nop

08000c94 <__aeabi_fcmplt>:
 8000c94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c98:	f7ff ffea 	bl	8000c70 <__aeabi_cfcmpeq>
 8000c9c:	bf34      	ite	cc
 8000c9e:	2001      	movcc	r0, #1
 8000ca0:	2000      	movcs	r0, #0
 8000ca2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_fcmple>:
 8000ca8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cac:	f7ff ffe0 	bl	8000c70 <__aeabi_cfcmpeq>
 8000cb0:	bf94      	ite	ls
 8000cb2:	2001      	movls	r0, #1
 8000cb4:	2000      	movhi	r0, #0
 8000cb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cba:	bf00      	nop

08000cbc <__aeabi_fcmpge>:
 8000cbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc0:	f7ff ffd2 	bl	8000c68 <__aeabi_cfrcmple>
 8000cc4:	bf94      	ite	ls
 8000cc6:	2001      	movls	r0, #1
 8000cc8:	2000      	movhi	r0, #0
 8000cca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fcmpgt>:
 8000cd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd4:	f7ff ffc8 	bl	8000c68 <__aeabi_cfrcmple>
 8000cd8:	bf34      	ite	cc
 8000cda:	2001      	movcc	r0, #1
 8000cdc:	2000      	movcs	r0, #0
 8000cde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_f2iz>:
 8000ce4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ce8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000cec:	d30f      	bcc.n	8000d0e <__aeabi_f2iz+0x2a>
 8000cee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000cf2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cf6:	d90d      	bls.n	8000d14 <__aeabi_f2iz+0x30>
 8000cf8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cfc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d00:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d04:	fa23 f002 	lsr.w	r0, r3, r2
 8000d08:	bf18      	it	ne
 8000d0a:	4240      	negne	r0, r0
 8000d0c:	4770      	bx	lr
 8000d0e:	f04f 0000 	mov.w	r0, #0
 8000d12:	4770      	bx	lr
 8000d14:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d18:	d101      	bne.n	8000d1e <__aeabi_f2iz+0x3a>
 8000d1a:	0242      	lsls	r2, r0, #9
 8000d1c:	d105      	bne.n	8000d2a <__aeabi_f2iz+0x46>
 8000d1e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000d22:	bf08      	it	eq
 8000d24:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_f2uiz>:
 8000d30:	0042      	lsls	r2, r0, #1
 8000d32:	d20e      	bcs.n	8000d52 <__aeabi_f2uiz+0x22>
 8000d34:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d38:	d30b      	bcc.n	8000d52 <__aeabi_f2uiz+0x22>
 8000d3a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d42:	d409      	bmi.n	8000d58 <__aeabi_f2uiz+0x28>
 8000d44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d4c:	fa23 f002 	lsr.w	r0, r3, r2
 8000d50:	4770      	bx	lr
 8000d52:	f04f 0000 	mov.w	r0, #0
 8000d56:	4770      	bx	lr
 8000d58:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d5c:	d101      	bne.n	8000d62 <__aeabi_f2uiz+0x32>
 8000d5e:	0242      	lsls	r2, r0, #9
 8000d60:	d102      	bne.n	8000d68 <__aeabi_f2uiz+0x38>
 8000d62:	f04f 30ff 	mov.w	r0, #4294967295
 8000d66:	4770      	bx	lr
 8000d68:	f04f 0000 	mov.w	r0, #0
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d76:	f001 fc61 	bl	800263c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7a:	f000 f971 	bl	8001060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7e:	f000 fbc7 	bl	8001510 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d82:	f000 f9c9 	bl	8001118 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d86:	f000 fa05 	bl	8001194 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8000d8a:	f000 fb97 	bl	80014bc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d8e:	f000 fa97 	bl	80012c0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000d92:	f000 fa3d 	bl	8001210 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000d96:	f000 faeb 	bl	8001370 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d9a:	f000 fb37 	bl	800140c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000d9e:	2104      	movs	r1, #4
 8000da0:	48a0      	ldr	r0, [pc, #640]	@ (8001024 <main+0x2b4>)
 8000da2:	f003 f8b5 	bl	8003f10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000da6:	2100      	movs	r1, #0
 8000da8:	489f      	ldr	r0, [pc, #636]	@ (8001028 <main+0x2b8>)
 8000daa:	f003 f8b1 	bl	8003f10 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_1);
 8000dae:	2100      	movs	r1, #0
 8000db0:	489e      	ldr	r0, [pc, #632]	@ (800102c <main+0x2bc>)
 8000db2:	f003 f9f1 	bl	8004198 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_2);
 8000db6:	2104      	movs	r1, #4
 8000db8:	489c      	ldr	r0, [pc, #624]	@ (800102c <main+0x2bc>)
 8000dba:	f003 f9ed 	bl	8004198 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000dbe:	489c      	ldr	r0, [pc, #624]	@ (8001030 <main+0x2c0>)
 8000dc0:	f003 f804 	bl	8003dcc <HAL_TIM_Base_Start_IT>

  button.autoManual = MANUAL;
 8000dc4:	4b9b      	ldr	r3, [pc, #620]	@ (8001034 <main+0x2c4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	719a      	strb	r2, [r3, #6]
  button.step1 = RELEASE;
 8000dca:	4b9a      	ldr	r3, [pc, #616]	@ (8001034 <main+0x2c4>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
  button.step2 = RELEASE;
 8000dd0:	4b98      	ldr	r3, [pc, #608]	@ (8001034 <main+0x2c4>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	705a      	strb	r2, [r3, #1]
  button.step3 = RELEASE;
 8000dd6:	4b97      	ldr	r3, [pc, #604]	@ (8001034 <main+0x2c4>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	709a      	strb	r2, [r3, #2]
  button.foot = RELEASE;
 8000ddc:	4b95      	ldr	r3, [pc, #596]	@ (8001034 <main+0x2c4>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	70da      	strb	r2, [r3, #3]
  button.side = RELEASE;
 8000de2:	4b94      	ldr	r3, [pc, #592]	@ (8001034 <main+0x2c4>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	711a      	strb	r2, [r3, #4]
  button.retract = RELEASE;
 8000de8:	4b92      	ldr	r3, [pc, #584]	@ (8001034 <main+0x2c4>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	715a      	strb	r2, [r3, #5]

  motor.loadStatus =NORMAL;
 8000dee:	4b92      	ldr	r3, [pc, #584]	@ (8001038 <main+0x2c8>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	751a      	strb	r2, [r3, #20]

  time.timeSysStart = HAL_GetTick();
 8000df4:	f001 fc7a 	bl	80026ec <HAL_GetTick>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b8f      	ldr	r3, [pc, #572]	@ (800103c <main+0x2cc>)
 8000dfe:	601a      	str	r2, [r3, #0]
  TM1637_Init(&display, TM1637_CLK_PORT, TM1637_CLK_PIN, TM1637_DIO_PORT, TM1637_DIO_PIN, 5);
 8000e00:	2305      	movs	r3, #5
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	2380      	movs	r3, #128	@ 0x80
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	4b8d      	ldr	r3, [pc, #564]	@ (8001040 <main+0x2d0>)
 8000e0a:	2220      	movs	r2, #32
 8000e0c:	498c      	ldr	r1, [pc, #560]	@ (8001040 <main+0x2d0>)
 8000e0e:	488d      	ldr	r0, [pc, #564]	@ (8001044 <main+0x2d4>)
 8000e10:	f001 f956 	bl	80020c0 <TM1637_Init>
  TM1637_SetBrightness(&display, 7, 1);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2107      	movs	r1, #7
 8000e18:	488a      	ldr	r0, [pc, #552]	@ (8001044 <main+0x2d4>)
 8000e1a:	f001 f97c 	bl	8002116 <TM1637_SetBrightness>
  TM1637_ShowNumberDec(&display, 1234, 0, 4, 0);
 8000e1e:	2300      	movs	r3, #0
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2304      	movs	r3, #4
 8000e24:	2200      	movs	r2, #0
 8000e26:	f240 41d2 	movw	r1, #1234	@ 0x4d2
 8000e2a:	4886      	ldr	r0, [pc, #536]	@ (8001044 <main+0x2d4>)
 8000e2c:	f001 f9dc 	bl	80021e8 <TM1637_ShowNumberDec>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e36:	4884      	ldr	r0, [pc, #528]	@ (8001048 <main+0x2d8>)
 8000e38:	f002 fa81 	bl	800333e <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//=======================================poten==========================
	HAL_ADC_Start(&hadc1);
 8000e3c:	4883      	ldr	r0, [pc, #524]	@ (800104c <main+0x2dc>)
 8000e3e:	f001 fd5b 	bl	80028f8 <HAL_ADC_Start>
	HAL_Delay(1000);
 8000e42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e46:	f001 fc5b 	bl	8002700 <HAL_Delay>
	int adc1 = HAL_ADC_GetValue(&hadc1)*VOL_SUPPLY_MCU/ADC_12_BIT;
 8000e4a:	4880      	ldr	r0, [pc, #512]	@ (800104c <main+0x2dc>)
 8000e4c:	f001 fe2e 	bl	8002aac <HAL_ADC_GetValue>
 8000e50:	4603      	mov	r3, r0
 8000e52:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000e56:	fb03 f202 	mul.w	r2, r3, r2
 8000e5a:	4b7d      	ldr	r3, [pc, #500]	@ (8001050 <main+0x2e0>)
 8000e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e60:	1ad2      	subs	r2, r2, r3
 8000e62:	0852      	lsrs	r2, r2, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	0adb      	lsrs	r3, r3, #11
 8000e68:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 8000e6a:	4878      	ldr	r0, [pc, #480]	@ (800104c <main+0x2dc>)
 8000e6c:	f001 fdf2 	bl	8002a54 <HAL_ADC_Stop>
	int poten1 = (adc1*PWM_FULL_DUTY)/VOL_SUPPLY_MCU;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a78      	ldr	r2, [pc, #480]	@ (8001054 <main+0x2e4>)
 8000e74:	fb82 1203 	smull	r1, r2, r2, r3
 8000e78:	1112      	asrs	r2, r2, #4
 8000e7a:	17db      	asrs	r3, r3, #31
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	603b      	str	r3, [r7, #0]

	// display rate to poten
	TM1637_SetBrightness(&display, 7, 1);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2107      	movs	r1, #7
 8000e84:	486f      	ldr	r0, [pc, #444]	@ (8001044 <main+0x2d4>)
 8000e86:	f001 f946 	bl	8002116 <TM1637_SetBrightness>
	motor.poten1 = (poten1*MOTOR_MAX_SPEED)/PWM_FULL_DUTY;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8000e90:	fb02 f303 	mul.w	r3, r2, r3
 8000e94:	4a70      	ldr	r2, [pc, #448]	@ (8001058 <main+0x2e8>)
 8000e96:	fb82 1203 	smull	r1, r2, r2, r3
 8000e9a:	1112      	asrs	r2, r2, #4
 8000e9c:	17db      	asrs	r3, r3, #31
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fe55 	bl	8000b50 <__aeabi_i2f>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4a63      	ldr	r2, [pc, #396]	@ (8001038 <main+0x2c8>)
 8000eaa:	6013      	str	r3, [r2, #0]
	TM1637_ShowNumberDec(&display, motor.poten1, 0, 4, 0);
 8000eac:	4b62      	ldr	r3, [pc, #392]	@ (8001038 <main+0x2c8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff17 	bl	8000ce4 <__aeabi_f2iz>
 8000eb6:	4601      	mov	r1, r0
 8000eb8:	2300      	movs	r3, #0
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4860      	ldr	r0, [pc, #384]	@ (8001044 <main+0x2d4>)
 8000ec2:	f001 f991 	bl	80021e8 <TM1637_ShowNumberDec>
	//=======================================================================


	  retractCm = 0;
 8000ec6:	4b65      	ldr	r3, [pc, #404]	@ (800105c <main+0x2ec>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
	 if(button.side == PRESS){
 8000ecc:	4b59      	ldr	r3, [pc, #356]	@ (8001034 <main+0x2c4>)
 8000ece:	791b      	ldrb	r3, [r3, #4]
 8000ed0:	f083 0301 	eor.w	r3, r3, #1
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d004      	beq.n	8000ee4 <main+0x174>
		 slowStart(75);
 8000eda:	204b      	movs	r0, #75	@ 0x4b
 8000edc:	f000 fd42 	bl	8001964 <slowStart>
		 resetStatusButton();
 8000ee0:	f000 fe90 	bl	8001c04 <resetStatusButton>
	 }

	 if(button.autoManual == AUTOMATIC){
 8000ee4:	4b53      	ldr	r3, [pc, #332]	@ (8001034 <main+0x2c4>)
 8000ee6:	799b      	ldrb	r3, [r3, #6]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d048      	beq.n	8000f7e <main+0x20e>
		 if(button.foot == PRESS){
 8000eec:	4b51      	ldr	r3, [pc, #324]	@ (8001034 <main+0x2c4>)
 8000eee:	78db      	ldrb	r3, [r3, #3]
 8000ef0:	f083 0301 	eor.w	r3, r3, #1
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d075      	beq.n	8000fe6 <main+0x276>
			 if((HAL_GetTick() - time.timePressFootStart) >= 2000){
 8000efa:	f001 fbf7 	bl	80026ec <HAL_GetTick>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a4e      	ldr	r2, [pc, #312]	@ (800103c <main+0x2cc>)
 8000f02:	6892      	ldr	r2, [r2, #8]
 8000f04:	1a9b      	subs	r3, r3, r2
 8000f06:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000f0a:	d31a      	bcc.n	8000f42 <main+0x1d2>
				 resetStatusButton();
 8000f0c:	f000 fe7a 	bl	8001c04 <resetStatusButton>
				 slowStartup();
 8000f10:	f000 fbb6 	bl	8001680 <slowStartup>
				 // Run with speed config				 while(1){
					 setSpeed();
 8000f14:	f000 fbea 	bl	80016ec <setSpeed>
					 motor.rate = measureSpeed();
 8000f18:	f000 fc46 	bl	80017a8 <measureSpeed>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4a46      	ldr	r2, [pc, #280]	@ (8001038 <main+0x2c8>)
 8000f20:	6113      	str	r3, [r2, #16]
					 displaySpeed(motor.rate);
 8000f22:	4b45      	ldr	r3, [pc, #276]	@ (8001038 <main+0x2c8>)
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fc86 	bl	8001838 <displaySpeed>
					 if(motor.rate |= motor.setRate){
 8000f2c:	4b42      	ldr	r3, [pc, #264]	@ (8001038 <main+0x2c8>)
 8000f2e:	691a      	ldr	r2, [r3, #16]
 8000f30:	4b41      	ldr	r3, [pc, #260]	@ (8001038 <main+0x2c8>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	4a40      	ldr	r2, [pc, #256]	@ (8001038 <main+0x2c8>)
 8000f38:	6113      	str	r3, [r2, #16]
 8000f3a:	4b3f      	ldr	r3, [pc, #252]	@ (8001038 <main+0x2c8>)
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d169      	bne.n	8001016 <main+0x2a6>
						 break;
					 }
				 }
				 adjustSpeedDisplay();
 8000f42:	f000 fca7 	bl	8001894 <adjustSpeedDisplay>

				 //check load high
				 if(!checkLoadHigh()){
 8000f46:	f000 fe4b 	bl	8001be0 <checkLoadHigh>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	f083 0301 	eor.w	r3, r3, #1
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d047      	beq.n	8000fe6 <main+0x276>
					while(1){
						if(button.foot == PRESS){
 8000f56:	4b37      	ldr	r3, [pc, #220]	@ (8001034 <main+0x2c4>)
 8000f58:	78db      	ldrb	r3, [r3, #3]
 8000f5a:	f083 0301 	eor.w	r3, r3, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d008      	beq.n	8000f76 <main+0x206>
							if((HAL_GetTick() - time.timePressFootStart) >= 2000){
 8000f64:	f001 fbc2 	bl	80026ec <HAL_GetTick>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a34      	ldr	r2, [pc, #208]	@ (800103c <main+0x2cc>)
 8000f6c:	6892      	ldr	r2, [r2, #8]
 8000f6e:	1a9b      	subs	r3, r3, r2
 8000f70:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000f74:	d236      	bcs.n	8000fe4 <main+0x274>
								break;
							}
						 }
						if(button.foot == RELEASE){
 8000f76:	4b2f      	ldr	r3, [pc, #188]	@ (8001034 <main+0x2c4>)
 8000f78:	78db      	ldrb	r3, [r3, #3]
 8000f7a:	2b00      	cmp	r3, #0
						if(button.foot == PRESS){
 8000f7c:	e7eb      	b.n	8000f56 <main+0x1e6>
					}
				 }
			 }
		 }
	 else{
		 if(button.foot == PRESS){
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001034 <main+0x2c4>)
 8000f80:	78db      	ldrb	r3, [r3, #3]
 8000f82:	f083 0301 	eor.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d02c      	beq.n	8000fe6 <main+0x276>
			 resetStatusButton();
 8000f8c:	f000 fe3a 	bl	8001c04 <resetStatusButton>
			 slowStartup();
 8000f90:	f000 fb76 	bl	8001680 <slowStartup>
			 // Run with speed config
			 while(1){
				 setSpeed();
 8000f94:	f000 fbaa 	bl	80016ec <setSpeed>
				 motor.rate = measureSpeed();
 8000f98:	f000 fc06 	bl	80017a8 <measureSpeed>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a26      	ldr	r2, [pc, #152]	@ (8001038 <main+0x2c8>)
 8000fa0:	6113      	str	r3, [r2, #16]
				 displaySpeed(motor.rate);
 8000fa2:	4b25      	ldr	r3, [pc, #148]	@ (8001038 <main+0x2c8>)
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fc46 	bl	8001838 <displaySpeed>
				 if(motor.rate |= motor.setRate){
 8000fac:	4b22      	ldr	r3, [pc, #136]	@ (8001038 <main+0x2c8>)
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <main+0x2c8>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	4a20      	ldr	r2, [pc, #128]	@ (8001038 <main+0x2c8>)
 8000fb8:	6113      	str	r3, [r2, #16]
 8000fba:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <main+0x2c8>)
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d100      	bne.n	8000fc4 <main+0x254>
				 setSpeed();
 8000fc2:	e7e7      	b.n	8000f94 <main+0x224>
					 break;
 8000fc4:	bf00      	nop
				 }
			 }
			 adjustSpeedDisplay();
 8000fc6:	f000 fc65 	bl	8001894 <adjustSpeedDisplay>

			 //check load high
			 if(!checkLoadHigh()){
 8000fca:	f000 fe09 	bl	8001be0 <checkLoadHigh>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f083 0301 	eor.w	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <main+0x276>
				if(button.foot == RELEASE){
 8000fda:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <main+0x2c4>)
 8000fdc:	78db      	ldrb	r3, [r3, #3]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d117      	bne.n	8001012 <main+0x2a2>
 8000fe2:	e000      	b.n	8000fe6 <main+0x276>
								break;
 8000fe4:	bf00      	nop
			 }
		 }
	 }


	 if(((HAL_GetTick() - time.timeSysStart) > 5000) && (button.retract == PRESS)){
 8000fe6:	f001 fb81 	bl	80026ec <HAL_GetTick>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a13      	ldr	r2, [pc, #76]	@ (800103c <main+0x2cc>)
 8000fee:	6812      	ldr	r2, [r2, #0]
 8000ff0:	1a9b      	subs	r3, r3, r2
 8000ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	f67f af20 	bls.w	8000e3c <main+0xcc>
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <main+0x2c4>)
 8000ffe:	795b      	ldrb	r3, [r3, #5]
 8001000:	f083 0301 	eor.w	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	f43f af18 	beq.w	8000e3c <main+0xcc>
		  retract();
 800100c:	f000 fd00 	bl	8001a10 <retract>
 8001010:	e714      	b.n	8000e3c <main+0xcc>
					continue;
 8001012:	bf00      	nop
  {
 8001014:	e712      	b.n	8000e3c <main+0xcc>
						 break;
 8001016:	bf00      	nop
 8001018:	2300      	movs	r3, #0
	 }
  }
  /* USER CODE END 3 */
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200000d0 	.word	0x200000d0
 8001028:	20000160 	.word	0x20000160
 800102c:	20000088 	.word	0x20000088
 8001030:	20000118 	.word	0x20000118
 8001034:	200001f0 	.word	0x200001f0
 8001038:	200001f8 	.word	0x200001f8
 800103c:	20000210 	.word	0x20000210
 8001040:	40010800 	.word	0x40010800
 8001044:	20000224 	.word	0x20000224
 8001048:	40011000 	.word	0x40011000
 800104c:	20000028 	.word	0x20000028
 8001050:	00100101 	.word	0x00100101
 8001054:	3e0f83e1 	.word	0x3e0f83e1
 8001058:	51eb851f 	.word	0x51eb851f
 800105c:	20000220 	.word	0x20000220

08001060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b094      	sub	sp, #80	@ 0x50
 8001064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800106a:	2228      	movs	r2, #40	@ 0x28
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f003 ffc4 	bl	8004ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001090:	2301      	movs	r3, #1
 8001092:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001094:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001098:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109e:	2301      	movs	r3, #1
 80010a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a2:	2302      	movs	r3, #2
 80010a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010ac:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80010b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 f972 	bl	80033a0 <HAL_RCC_OscConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010c2:	f000 fdb1 	bl	8001c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c6:	230f      	movs	r3, #15
 80010c8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2102      	movs	r1, #2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 fbde 	bl	80038a4 <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80010ee:	f000 fd9b 	bl	8001c28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010f2:	2302      	movs	r3, #2
 80010f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80010f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010fa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 fd5e 	bl	8003bc0 <HAL_RCCEx_PeriphCLKConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800110a:	f000 fd8d 	bl	8001c28 <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3750      	adds	r7, #80	@ 0x50
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001128:	4b18      	ldr	r3, [pc, #96]	@ (800118c <MX_ADC1_Init+0x74>)
 800112a:	4a19      	ldr	r2, [pc, #100]	@ (8001190 <MX_ADC1_Init+0x78>)
 800112c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800112e:	4b17      	ldr	r3, [pc, #92]	@ (800118c <MX_ADC1_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <MX_ADC1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800113a:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_ADC1_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <MX_ADC1_Init+0x74>)
 8001142:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001146:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001148:	4b10      	ldr	r3, [pc, #64]	@ (800118c <MX_ADC1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <MX_ADC1_Init+0x74>)
 8001150:	2201      	movs	r2, #1
 8001152:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001154:	480d      	ldr	r0, [pc, #52]	@ (800118c <MX_ADC1_Init+0x74>)
 8001156:	f001 faf7 	bl	8002748 <HAL_ADC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001160:	f000 fd62 	bl	8001c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001168:	2301      	movs	r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	@ (800118c <MX_ADC1_Init+0x74>)
 8001176:	f001 fca5 	bl	8002ac4 <HAL_ADC_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001180:	f000 fd52 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000028 	.word	0x20000028
 8001190:	40012400 	.word	0x40012400

08001194 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011a4:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <MX_ADC2_Init+0x74>)
 80011a6:	4a19      	ldr	r2, [pc, #100]	@ (800120c <MX_ADC2_Init+0x78>)
 80011a8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011aa:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <MX_ADC2_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011b0:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <MX_ADC2_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011b6:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_ADC2_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011bc:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <MX_ADC2_Init+0x74>)
 80011be:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80011c2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c4:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <MX_ADC2_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <MX_ADC2_Init+0x74>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011d0:	480d      	ldr	r0, [pc, #52]	@ (8001208 <MX_ADC2_Init+0x74>)
 80011d2:	f001 fab9 	bl	8002748 <HAL_ADC_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80011dc:	f000 fd24 	bl	8001c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	@ (8001208 <MX_ADC2_Init+0x74>)
 80011f2:	f001 fc67 	bl	8002ac4 <HAL_ADC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80011fc:	f000 fd14 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000058 	.word	0x20000058
 800120c:	40012800 	.word	0x40012800

08001210 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	@ 0x30
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	2224      	movs	r2, #36	@ 0x24
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f003 feec 	bl	8004ffc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800122c:	4b22      	ldr	r3, [pc, #136]	@ (80012b8 <MX_TIM1_Init+0xa8>)
 800122e:	4a23      	ldr	r2, [pc, #140]	@ (80012bc <MX_TIM1_Init+0xac>)
 8001230:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001232:	4b21      	ldr	r3, [pc, #132]	@ (80012b8 <MX_TIM1_Init+0xa8>)
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	4b1f      	ldr	r3, [pc, #124]	@ (80012b8 <MX_TIM1_Init+0xa8>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800123e:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <MX_TIM1_Init+0xa8>)
 8001240:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001244:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001246:	4b1c      	ldr	r3, [pc, #112]	@ (80012b8 <MX_TIM1_Init+0xa8>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800124c:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <MX_TIM1_Init+0xa8>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001252:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <MX_TIM1_Init+0xa8>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001258:	2301      	movs	r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001260:	2301      	movs	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001270:	2301      	movs	r3, #1
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4619      	mov	r1, r3
 8001282:	480d      	ldr	r0, [pc, #52]	@ (80012b8 <MX_TIM1_Init+0xa8>)
 8001284:	f002 fee6 	bl	8004054 <HAL_TIM_Encoder_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800128e:	f000 fccb 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <MX_TIM1_Init+0xa8>)
 80012a0:	f003 fd5e 	bl	8004d60 <HAL_TIMEx_MasterConfigSynchronization>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80012aa:	f000 fcbd 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	3730      	adds	r7, #48	@ 0x30
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000088 	.word	0x20000088
 80012bc:	40012c00 	.word	0x40012c00

080012c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	@ 0x28
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c6:	f107 0320 	add.w	r3, r7, #32
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]
 80012de:	615a      	str	r2, [r3, #20]
 80012e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012e2:	4b22      	ldr	r3, [pc, #136]	@ (800136c <MX_TIM2_Init+0xac>)
 80012e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80012ea:	4b20      	ldr	r3, [pc, #128]	@ (800136c <MX_TIM2_Init+0xac>)
 80012ec:	2247      	movs	r2, #71	@ 0x47
 80012ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b1e      	ldr	r3, [pc, #120]	@ (800136c <MX_TIM2_Init+0xac>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 80012f6:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <MX_TIM2_Init+0xac>)
 80012f8:	2231      	movs	r2, #49	@ 0x31
 80012fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <MX_TIM2_Init+0xac>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001302:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <MX_TIM2_Init+0xac>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001308:	4818      	ldr	r0, [pc, #96]	@ (800136c <MX_TIM2_Init+0xac>)
 800130a:	f002 fdb1 	bl	8003e70 <HAL_TIM_PWM_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001314:	f000 fc88 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	4619      	mov	r1, r3
 8001326:	4811      	ldr	r0, [pc, #68]	@ (800136c <MX_TIM2_Init+0xac>)
 8001328:	f003 fd1a 	bl	8004d60 <HAL_TIMEx_MasterConfigSynchronization>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001332:	f000 fc79 	bl	8001c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001336:	2360      	movs	r3, #96	@ 0x60
 8001338:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2204      	movs	r2, #4
 800134a:	4619      	mov	r1, r3
 800134c:	4807      	ldr	r0, [pc, #28]	@ (800136c <MX_TIM2_Init+0xac>)
 800134e:	f003 f8a1 	bl	8004494 <HAL_TIM_PWM_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001358:	f000 fc66 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800135c:	4803      	ldr	r0, [pc, #12]	@ (800136c <MX_TIM2_Init+0xac>)
 800135e:	f000 fd97 	bl	8001e90 <HAL_TIM_MspPostInit>

}
 8001362:	bf00      	nop
 8001364:	3728      	adds	r7, #40	@ 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200000d0 	.word	0x200000d0

08001370 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001384:	463b      	mov	r3, r7
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800138c:	4b1d      	ldr	r3, [pc, #116]	@ (8001404 <MX_TIM3_Init+0x94>)
 800138e:	4a1e      	ldr	r2, [pc, #120]	@ (8001408 <MX_TIM3_Init+0x98>)
 8001390:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001392:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <MX_TIM3_Init+0x94>)
 8001394:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001398:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139a:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <MX_TIM3_Init+0x94>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80013a0:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <MX_TIM3_Init+0x94>)
 80013a2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80013a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b16      	ldr	r3, [pc, #88]	@ (8001404 <MX_TIM3_Init+0x94>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <MX_TIM3_Init+0x94>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013b4:	4813      	ldr	r0, [pc, #76]	@ (8001404 <MX_TIM3_Init+0x94>)
 80013b6:	f002 fcb9 	bl	8003d2c <HAL_TIM_Base_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80013c0:	f000 fc32 	bl	8001c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	4619      	mov	r1, r3
 80013d0:	480c      	ldr	r0, [pc, #48]	@ (8001404 <MX_TIM3_Init+0x94>)
 80013d2:	f003 f921 	bl	8004618 <HAL_TIM_ConfigClockSource>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80013dc:	f000 fc24 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	@ (8001404 <MX_TIM3_Init+0x94>)
 80013ee:	f003 fcb7 	bl	8004d60 <HAL_TIMEx_MasterConfigSynchronization>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80013f8:	f000 fc16 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000118 	.word	0x20000118
 8001408:	40000400 	.word	0x40000400

0800140c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	@ 0x28
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001412:	f107 0320 	add.w	r3, r7, #32
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
 800142a:	615a      	str	r2, [r3, #20]
 800142c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800142e:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <MX_TIM4_Init+0xa8>)
 8001430:	4a21      	ldr	r2, [pc, #132]	@ (80014b8 <MX_TIM4_Init+0xac>)
 8001432:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001434:	4b1f      	ldr	r3, [pc, #124]	@ (80014b4 <MX_TIM4_Init+0xa8>)
 8001436:	2247      	movs	r2, #71	@ 0x47
 8001438:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143a:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <MX_TIM4_Init+0xa8>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49;
 8001440:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <MX_TIM4_Init+0xa8>)
 8001442:	2231      	movs	r2, #49	@ 0x31
 8001444:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b1b      	ldr	r3, [pc, #108]	@ (80014b4 <MX_TIM4_Init+0xa8>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <MX_TIM4_Init+0xa8>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001452:	4818      	ldr	r0, [pc, #96]	@ (80014b4 <MX_TIM4_Init+0xa8>)
 8001454:	f002 fd0c 	bl	8003e70 <HAL_TIM_PWM_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800145e:	f000 fbe3 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800146a:	f107 0320 	add.w	r3, r7, #32
 800146e:	4619      	mov	r1, r3
 8001470:	4810      	ldr	r0, [pc, #64]	@ (80014b4 <MX_TIM4_Init+0xa8>)
 8001472:	f003 fc75 	bl	8004d60 <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800147c:	f000 fbd4 	bl	8001c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001480:	2360      	movs	r3, #96	@ 0x60
 8001482:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2200      	movs	r2, #0
 8001494:	4619      	mov	r1, r3
 8001496:	4807      	ldr	r0, [pc, #28]	@ (80014b4 <MX_TIM4_Init+0xa8>)
 8001498:	f002 fffc 	bl	8004494 <HAL_TIM_PWM_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80014a2:	f000 fbc1 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014a6:	4803      	ldr	r0, [pc, #12]	@ (80014b4 <MX_TIM4_Init+0xa8>)
 80014a8:	f000 fcf2 	bl	8001e90 <HAL_TIM_MspPostInit>

}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	@ 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000160 	.word	0x20000160
 80014b8:	40000800 	.word	0x40000800

080014bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	@ (800150c <MX_USART2_UART_Init+0x50>)
 80014c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014f4:	f003 fca4 	bl	8004e40 <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014fe:	f000 fb93 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200001a8 	.word	0x200001a8
 800150c:	40004400 	.word	0x40004400

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001524:	4b51      	ldr	r3, [pc, #324]	@ (800166c <MX_GPIO_Init+0x15c>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a50      	ldr	r2, [pc, #320]	@ (800166c <MX_GPIO_Init+0x15c>)
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b4e      	ldr	r3, [pc, #312]	@ (800166c <MX_GPIO_Init+0x15c>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153c:	4b4b      	ldr	r3, [pc, #300]	@ (800166c <MX_GPIO_Init+0x15c>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a4a      	ldr	r2, [pc, #296]	@ (800166c <MX_GPIO_Init+0x15c>)
 8001542:	f043 0320 	orr.w	r3, r3, #32
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b48      	ldr	r3, [pc, #288]	@ (800166c <MX_GPIO_Init+0x15c>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0320 	and.w	r3, r3, #32
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b45      	ldr	r3, [pc, #276]	@ (800166c <MX_GPIO_Init+0x15c>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a44      	ldr	r2, [pc, #272]	@ (800166c <MX_GPIO_Init+0x15c>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b42      	ldr	r3, [pc, #264]	@ (800166c <MX_GPIO_Init+0x15c>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156c:	4b3f      	ldr	r3, [pc, #252]	@ (800166c <MX_GPIO_Init+0x15c>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a3e      	ldr	r2, [pc, #248]	@ (800166c <MX_GPIO_Init+0x15c>)
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b3c      	ldr	r3, [pc, #240]	@ (800166c <MX_GPIO_Init+0x15c>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800158a:	4839      	ldr	r0, [pc, #228]	@ (8001670 <MX_GPIO_Init+0x160>)
 800158c:	f001 fed7 	bl	800333e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TM1637_CLK_Pin|TM1637_DIO_Pin, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	21a0      	movs	r1, #160	@ 0xa0
 8001594:	4837      	ldr	r0, [pc, #220]	@ (8001674 <MX_GPIO_Init+0x164>)
 8001596:	f001 fed2 	bl	800333e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800159a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800159e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	4619      	mov	r1, r3
 80015b2:	482f      	ldr	r0, [pc, #188]	@ (8001670 <MX_GPIO_Init+0x160>)
 80015b4:	f001 fd28 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : TM1637_CLK_Pin TM1637_DIO_Pin */
  GPIO_InitStruct.Pin = TM1637_CLK_Pin|TM1637_DIO_Pin;
 80015b8:	23a0      	movs	r3, #160	@ 0xa0
 80015ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4619      	mov	r1, r3
 80015ce:	4829      	ldr	r0, [pc, #164]	@ (8001674 <MX_GPIO_Init+0x164>)
 80015d0:	f001 fd1a 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : M_A_SW_Pin Retract_SW_Pin Rotary_SW_1_Pin Rotary_SW_2_Pin
                           Rotary_SW_3_Pin Foot_SW_Pin BTN_Side_Pin */
  GPIO_InitStruct.Pin = M_A_SW_Pin|Retract_SW_Pin|Rotary_SW_1_Pin|Rotary_SW_2_Pin
 80015d4:	f643 4307 	movw	r3, #15367	@ 0x3c07
 80015d8:	613b      	str	r3, [r7, #16]
                          |Rotary_SW_3_Pin|Foot_SW_Pin|BTN_Side_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015da:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <MX_GPIO_Init+0x168>)
 80015dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015de:	2301      	movs	r3, #1
 80015e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	4619      	mov	r1, r3
 80015e8:	4824      	ldr	r0, [pc, #144]	@ (800167c <MX_GPIO_Init+0x16c>)
 80015ea:	f001 fd0d 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_Pin */
  GPIO_InitStruct.Pin = nSLEEP_Pin;
 80015ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(nSLEEP_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4619      	mov	r1, r3
 8001602:	481c      	ldr	r0, [pc, #112]	@ (8001674 <MX_GPIO_Init+0x164>)
 8001604:	f001 fd00 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pin : nFAULT_Pin */
  GPIO_InitStruct.Pin = nFAULT_Pin;
 8001608:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800160c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160e:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <MX_GPIO_Init+0x168>)
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001612:	2301      	movs	r3, #1
 8001614:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(nFAULT_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	4619      	mov	r1, r3
 800161c:	4815      	ldr	r0, [pc, #84]	@ (8001674 <MX_GPIO_Init+0x164>)
 800161e:	f001 fcf3 	bl	8003008 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2101      	movs	r1, #1
 8001626:	2006      	movs	r0, #6
 8001628:	f001 fcb7 	bl	8002f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800162c:	2006      	movs	r0, #6
 800162e:	f001 fcd0 	bl	8002fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 3, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2103      	movs	r1, #3
 8001636:	2007      	movs	r0, #7
 8001638:	f001 fcaf 	bl	8002f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800163c:	2007      	movs	r0, #7
 800163e:	f001 fcc8 	bl	8002fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2102      	movs	r1, #2
 8001646:	2008      	movs	r0, #8
 8001648:	f001 fca7 	bl	8002f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800164c:	2008      	movs	r0, #8
 800164e:	f001 fcc0 	bl	8002fd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2102      	movs	r1, #2
 8001656:	2028      	movs	r0, #40	@ 0x28
 8001658:	f001 fc9f 	bl	8002f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800165c:	2028      	movs	r0, #40	@ 0x28
 800165e:	f001 fcb8 	bl	8002fd2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001662:	bf00      	nop
 8001664:	3720      	adds	r7, #32
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	40011000 	.word	0x40011000
 8001674:	40010800 	.word	0x40010800
 8001678:	10210000 	.word	0x10210000
 800167c:	40010c00 	.word	0x40010c00

08001680 <slowStartup>:

/* USER CODE BEGIN 4 */

void slowStartup(){
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
	float step = PWM_FULL_DUTY/(TIME_SLOW_STARTUP/10.0);
 8001686:	f04f 5378 	mov.w	r3, #1040187392	@ 0x3e000000
 800168a:	607b      	str	r3, [r7, #4]
	motor.pwmValue = 0;
 800168c:	4b14      	ldr	r3, [pc, #80]	@ (80016e0 <slowStartup+0x60>)
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
	while(motor.pwmValue < PWM_FULL_DUTY) {
 8001694:	e015      	b.n	80016c2 <slowStartup+0x42>
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, motor.pwmValue);
 8001696:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <slowStartup+0x60>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <slowStartup+0x64>)
 800169c:	6814      	ldr	r4, [r2, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fb46 	bl	8000d30 <__aeabi_f2uiz>
 80016a4:	4603      	mov	r3, r0
 80016a6:	63a3      	str	r3, [r4, #56]	@ 0x38
	    motor.pwmValue += step;
 80016a8:	4b0d      	ldr	r3, [pc, #52]	@ (80016e0 <slowStartup+0x60>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff f99a 	bl	80009e8 <__addsf3>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <slowStartup+0x60>)
 80016ba:	609a      	str	r2, [r3, #8]
	    HAL_Delay(10);
 80016bc:	200a      	movs	r0, #10
 80016be:	f001 f81f 	bl	8002700 <HAL_Delay>
	while(motor.pwmValue < PWM_FULL_DUTY) {
 80016c2:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <slowStartup+0x60>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	4908      	ldr	r1, [pc, #32]	@ (80016e8 <slowStartup+0x68>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fae3 	bl	8000c94 <__aeabi_fcmplt>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1e0      	bne.n	8001696 <slowStartup+0x16>
	}
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd90      	pop	{r4, r7, pc}
 80016de:	bf00      	nop
 80016e0:	200001f8 	.word	0x200001f8
 80016e4:	200000d0 	.word	0x200000d0
 80016e8:	42480000 	.word	0x42480000

080016ec <setSpeed>:



void setSpeed(){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af02      	add	r7, sp, #8
	HAL_ADC_Start(&hadc1);
 80016f2:	4826      	ldr	r0, [pc, #152]	@ (800178c <setSpeed+0xa0>)
 80016f4:	f001 f900 	bl	80028f8 <HAL_ADC_Start>
	HAL_Delay(1000);
 80016f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016fc:	f001 f800 	bl	8002700 <HAL_Delay>
	int adc1 = HAL_ADC_GetValue(&hadc1)*VOL_SUPPLY_MCU/ADC_12_BIT;
 8001700:	4822      	ldr	r0, [pc, #136]	@ (800178c <setSpeed+0xa0>)
 8001702:	f001 f9d3 	bl	8002aac <HAL_ADC_GetValue>
 8001706:	4603      	mov	r3, r0
 8001708:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800170c:	fb03 f202 	mul.w	r2, r3, r2
 8001710:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <setSpeed+0xa4>)
 8001712:	fba3 1302 	umull	r1, r3, r3, r2
 8001716:	1ad2      	subs	r2, r2, r3
 8001718:	0852      	lsrs	r2, r2, #1
 800171a:	4413      	add	r3, r2
 800171c:	0adb      	lsrs	r3, r3, #11
 800171e:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 8001720:	481a      	ldr	r0, [pc, #104]	@ (800178c <setSpeed+0xa0>)
 8001722:	f001 f997 	bl	8002a54 <HAL_ADC_Stop>
	int poten1 = (adc1*PWM_FULL_DUTY)/VOL_SUPPLY_MCU;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a1a      	ldr	r2, [pc, #104]	@ (8001794 <setSpeed+0xa8>)
 800172a:	fb82 1203 	smull	r1, r2, r2, r3
 800172e:	1112      	asrs	r2, r2, #4
 8001730:	17db      	asrs	r3, r3, #31
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	603b      	str	r3, [r7, #0]

	// display rate to poten
	TM1637_SetBrightness(&display, 7, 1);
 8001736:	2201      	movs	r2, #1
 8001738:	2107      	movs	r1, #7
 800173a:	4817      	ldr	r0, [pc, #92]	@ (8001798 <setSpeed+0xac>)
 800173c:	f000 fceb 	bl	8002116 <TM1637_SetBrightness>
	motor.poten1 = (poten1*MOTOR_MAX_SPEED)/PWM_FULL_DUTY;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	4a14      	ldr	r2, [pc, #80]	@ (800179c <setSpeed+0xb0>)
 800174c:	fb82 1203 	smull	r1, r2, r2, r3
 8001750:	1112      	asrs	r2, r2, #4
 8001752:	17db      	asrs	r3, r3, #31
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff f9fa 	bl	8000b50 <__aeabi_i2f>
 800175c:	4603      	mov	r3, r0
 800175e:	4a10      	ldr	r2, [pc, #64]	@ (80017a0 <setSpeed+0xb4>)
 8001760:	6013      	str	r3, [r2, #0]
	TM1637_ShowNumberDec(&display, motor.poten1, 0, 4, 0);
 8001762:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <setSpeed+0xb4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fabc 	bl	8000ce4 <__aeabi_f2iz>
 800176c:	4601      	mov	r1, r0
 800176e:	2300      	movs	r3, #0
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2304      	movs	r3, #4
 8001774:	2200      	movs	r2, #0
 8001776:	4808      	ldr	r0, [pc, #32]	@ (8001798 <setSpeed+0xac>)
 8001778:	f000 fd36 	bl	80021e8 <TM1637_ShowNumberDec>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, poten1);
 800177c:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <setSpeed+0xb8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000028 	.word	0x20000028
 8001790:	00100101 	.word	0x00100101
 8001794:	3e0f83e1 	.word	0x3e0f83e1
 8001798:	20000224 	.word	0x20000224
 800179c:	51eb851f 	.word	0x51eb851f
 80017a0:	200001f8 	.word	0x200001f8
 80017a4:	200000d0 	.word	0x200000d0

080017a8 <measureSpeed>:

int measureSpeed(){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
	int timeStart = HAL_GetTick();
 80017ae:	f000 ff9d 	bl	80026ec <HAL_GetTick>
 80017b2:	4603      	mov	r3, r0
 80017b4:	617b      	str	r3, [r7, #20]
	int index = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
	int encoderCnt = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
	int encoderCntPre = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
	int rate = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
	while(index < 3){
 80017c6:	e01f      	b.n	8001808 <measureSpeed+0x60>
		if((HAL_GetTick() - timeStart) >= 1000){
 80017c8:	f000 ff90 	bl	80026ec <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017d6:	d317      	bcc.n	8001808 <measureSpeed+0x60>
			encoderCnt = __HAL_TIM_GET_COUNTER(&htim1);
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <measureSpeed+0x80>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	607b      	str	r3, [r7, #4]
			rate = (encoderCnt - encoderCntPre)/PULSES_REVOLUTION;
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	4a11      	ldr	r2, [pc, #68]	@ (800182c <measureSpeed+0x84>)
 80017e8:	fb82 1203 	smull	r1, r2, r2, r3
 80017ec:	441a      	add	r2, r3
 80017ee:	11d2      	asrs	r2, r2, #7
 80017f0:	17db      	asrs	r3, r3, #31
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	60bb      	str	r3, [r7, #8]
			encoderCntPre = encoderCnt;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	60fb      	str	r3, [r7, #12]
			timeStart = HAL_GetTick();
 80017fa:	f000 ff77 	bl	80026ec <HAL_GetTick>
 80017fe:	4603      	mov	r3, r0
 8001800:	617b      	str	r3, [r7, #20]
			index++;
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	3301      	adds	r3, #1
 8001806:	613b      	str	r3, [r7, #16]
	while(index < 3){
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	2b02      	cmp	r3, #2
 800180c:	dddc      	ble.n	80017c8 <measureSpeed+0x20>
		}
	}
	motor.rate = rate*60;
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	4613      	mov	r3, r2
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	461a      	mov	r2, r3
 800181a:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <measureSpeed+0x88>)
 800181c:	611a      	str	r2, [r3, #16]
	return rate;
 800181e:	68bb      	ldr	r3, [r7, #8]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000088 	.word	0x20000088
 800182c:	8c08c08d 	.word	0x8c08c08d
 8001830:	200001f8 	.word	0x200001f8
 8001834:	00000000 	.word	0x00000000

08001838 <displaySpeed>:

void displaySpeed(int n){
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af02      	add	r7, sp, #8
 800183e:	6078      	str	r0, [r7, #4]
	int N = 0.079746*(n*60);
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	1a9b      	subs	r3, r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fdd2 	bl	80003f4 <__aeabi_i2d>
 8001850:	a30d      	add	r3, pc, #52	@ (adr r3, 8001888 <displaySpeed+0x50>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fe37 	bl	80004c8 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff f843 	bl	80008ec <__aeabi_d2iz>
 8001866:	4603      	mov	r3, r0
 8001868:	60fb      	str	r3, [r7, #12]
	TM1637_ShowNumberDec(&display, N, 0, 4, 0);
 800186a:	2300      	movs	r3, #0
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2304      	movs	r3, #4
 8001870:	2200      	movs	r2, #0
 8001872:	68f9      	ldr	r1, [r7, #12]
 8001874:	4806      	ldr	r0, [pc, #24]	@ (8001890 <displaySpeed+0x58>)
 8001876:	f000 fcb7 	bl	80021e8 <TM1637_ShowNumberDec>
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	f3af 8000 	nop.w
 8001888:	ddfc9ff9 	.word	0xddfc9ff9
 800188c:	3fb46a3b 	.word	0x3fb46a3b
 8001890:	20000224 	.word	0x20000224

08001894 <adjustSpeedDisplay>:

int adjustSpeedDisplay(){
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
	int poten;
	if(button.step1 == PRESS){
 800189a:	4b2e      	ldr	r3, [pc, #184]	@ (8001954 <adjustSpeedDisplay+0xc0>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	f083 0301 	eor.w	r3, r3, #1
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d015      	beq.n	80018d4 <adjustSpeedDisplay+0x40>
		poten = PWM_FULL_DUTY;
 80018a8:	2332      	movs	r3, #50	@ 0x32
 80018aa:	607b      	str	r3, [r7, #4]
		motor.setRate = (poten*MOTOR_MAX_SPEED)/PWM_FULL_DUTY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a28      	ldr	r2, [pc, #160]	@ (8001958 <adjustSpeedDisplay+0xc4>)
 80018b8:	fb82 1203 	smull	r1, r2, r2, r3
 80018bc:	1112      	asrs	r2, r2, #4
 80018be:	17db      	asrs	r3, r3, #31
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	4a26      	ldr	r2, [pc, #152]	@ (800195c <adjustSpeedDisplay+0xc8>)
 80018c4:	60d3      	str	r3, [r2, #12]
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, poten);
 80018c6:	4b26      	ldr	r3, [pc, #152]	@ (8001960 <adjustSpeedDisplay+0xcc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	639a      	str	r2, [r3, #56]	@ 0x38
		displaySpeed(poten);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffb2 	bl	8001838 <displaySpeed>
	}
	if(button.step2 == PRESS){
 80018d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001954 <adjustSpeedDisplay+0xc0>)
 80018d6:	785b      	ldrb	r3, [r3, #1]
 80018d8:	f083 0301 	eor.w	r3, r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d015      	beq.n	800190e <adjustSpeedDisplay+0x7a>
		poten = PWM_FULL_DUTY/3;
 80018e2:	2310      	movs	r3, #16
 80018e4:	607b      	str	r3, [r7, #4]
		motor.setRate = (poten*MOTOR_MAX_SPEED)/PWM_FULL_DUTY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	4a19      	ldr	r2, [pc, #100]	@ (8001958 <adjustSpeedDisplay+0xc4>)
 80018f2:	fb82 1203 	smull	r1, r2, r2, r3
 80018f6:	1112      	asrs	r2, r2, #4
 80018f8:	17db      	asrs	r3, r3, #31
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	4a17      	ldr	r2, [pc, #92]	@ (800195c <adjustSpeedDisplay+0xc8>)
 80018fe:	60d3      	str	r3, [r2, #12]
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, poten);
 8001900:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <adjustSpeedDisplay+0xcc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	639a      	str	r2, [r3, #56]	@ 0x38
		displaySpeed(poten);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff95 	bl	8001838 <displaySpeed>
	}
	if(button.step3 == PRESS){
 800190e:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <adjustSpeedDisplay+0xc0>)
 8001910:	789b      	ldrb	r3, [r3, #2]
 8001912:	f083 0301 	eor.w	r3, r3, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d015      	beq.n	8001948 <adjustSpeedDisplay+0xb4>
		poten = PWM_FULL_DUTY/5;
 800191c:	230a      	movs	r3, #10
 800191e:	607b      	str	r3, [r7, #4]
		motor.setRate = (poten*MOTOR_MAX_SPEED)/PWM_FULL_DUTY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	4a0b      	ldr	r2, [pc, #44]	@ (8001958 <adjustSpeedDisplay+0xc4>)
 800192c:	fb82 1203 	smull	r1, r2, r2, r3
 8001930:	1112      	asrs	r2, r2, #4
 8001932:	17db      	asrs	r3, r3, #31
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	4a09      	ldr	r2, [pc, #36]	@ (800195c <adjustSpeedDisplay+0xc8>)
 8001938:	60d3      	str	r3, [r2, #12]
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, poten);
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <adjustSpeedDisplay+0xcc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	639a      	str	r2, [r3, #56]	@ 0x38
		displaySpeed(poten);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ff78 	bl	8001838 <displaySpeed>
	}
	return poten;
 8001948:	687b      	ldr	r3, [r7, #4]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200001f0 	.word	0x200001f0
 8001958:	51eb851f 	.word	0x51eb851f
 800195c:	200001f8 	.word	0x200001f8
 8001960:	200000d0 	.word	0x200000d0

08001964 <slowStart>:

void slowStart(int n){
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	int setPWM = (n*PWM_FULL_DUTY)/MOTOR_MAX_SPEED; //0-50
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2232      	movs	r2, #50	@ 0x32
 8001970:	fb02 f303 	mul.w	r3, r2, r3
 8001974:	4a22      	ldr	r2, [pc, #136]	@ (8001a00 <slowStart+0x9c>)
 8001976:	fb82 1203 	smull	r1, r2, r2, r3
 800197a:	441a      	add	r2, r3
 800197c:	1212      	asrs	r2, r2, #8
 800197e:	17db      	asrs	r3, r3, #31
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	60fb      	str	r3, [r7, #12]
	float step = setPWM/(TIME_SLOW_START/10.0);
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7fe fd35 	bl	80003f4 <__aeabi_i2d>
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <slowStart+0xa0>)
 8001990:	f7fe fec4 	bl	800071c <__aeabi_ddiv>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f7fe ffce 	bl	800093c <__aeabi_d2f>
 80019a0:	4603      	mov	r3, r0
 80019a2:	60bb      	str	r3, [r7, #8]

	motor.pwmValue = 0;
 80019a4:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <slowStart+0xa4>)
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
	while(motor.pwmValue < setPWM) {
 80019ac:	e015      	b.n	80019da <slowStart+0x76>
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, motor.pwmValue);
 80019ae:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <slowStart+0xa4>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	4a16      	ldr	r2, [pc, #88]	@ (8001a0c <slowStart+0xa8>)
 80019b4:	6814      	ldr	r4, [r2, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff f9ba 	bl	8000d30 <__aeabi_f2uiz>
 80019bc:	4603      	mov	r3, r0
 80019be:	63a3      	str	r3, [r4, #56]	@ 0x38
	    motor.pwmValue += step;
 80019c0:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <slowStart+0xa4>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f80e 	bl	80009e8 <__addsf3>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a08 <slowStart+0xa4>)
 80019d2:	609a      	str	r2, [r3, #8]
	    HAL_Delay(10);
 80019d4:	200a      	movs	r0, #10
 80019d6:	f000 fe93 	bl	8002700 <HAL_Delay>
	while(motor.pwmValue < setPWM) {
 80019da:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <slowStart+0xa4>)
 80019dc:	689c      	ldr	r4, [r3, #8]
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f7ff f8b6 	bl	8000b50 <__aeabi_i2f>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4619      	mov	r1, r3
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff f953 	bl	8000c94 <__aeabi_fcmplt>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1dc      	bne.n	80019ae <slowStart+0x4a>
	}
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd90      	pop	{r4, r7, pc}
 80019fe:	bf00      	nop
 8001a00:	ea0ea0eb 	.word	0xea0ea0eb
 8001a04:	408f4000 	.word	0x408f4000
 8001a08:	200001f8 	.word	0x200001f8
 8001a0c:	200000d0 	.word	0x200000d0

08001a10 <retract>:

void retract(){
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af02      	add	r7, sp, #8
	HAL_ADC_Start(&hadc2);
 8001a16:	4836      	ldr	r0, [pc, #216]	@ (8001af0 <retract+0xe0>)
 8001a18:	f000 ff6e 	bl	80028f8 <HAL_ADC_Start>
	HAL_Delay(1000);
 8001a1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a20:	f000 fe6e 	bl	8002700 <HAL_Delay>
	int adc2 = HAL_ADC_GetValue(&hadc2)*VOL_SUPPLY_MCU/ADC_12_BIT;
 8001a24:	4832      	ldr	r0, [pc, #200]	@ (8001af0 <retract+0xe0>)
 8001a26:	f001 f841 	bl	8002aac <HAL_ADC_GetValue>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001a30:	fb03 f202 	mul.w	r2, r3, r2
 8001a34:	4b2f      	ldr	r3, [pc, #188]	@ (8001af4 <retract+0xe4>)
 8001a36:	fba3 1302 	umull	r1, r3, r3, r2
 8001a3a:	1ad2      	subs	r2, r2, r3
 8001a3c:	0852      	lsrs	r2, r2, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	0adb      	lsrs	r3, r3, #11
 8001a42:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc2);
 8001a44:	482a      	ldr	r0, [pc, #168]	@ (8001af0 <retract+0xe0>)
 8001a46:	f001 f805 	bl	8002a54 <HAL_ADC_Stop>
	int poten = (adc2*PWM_FULL_DUTY)/VOL_SUPPLY_MCU;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001af8 <retract+0xe8>)
 8001a4e:	fb82 1203 	smull	r1, r2, r2, r3
 8001a52:	1112      	asrs	r2, r2, #4
 8001a54:	17db      	asrs	r3, r3, #31
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	603b      	str	r3, [r7, #0]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001a5a:	4b28      	ldr	r3, [pc, #160]	@ (8001afc <retract+0xec>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, poten);
 8001a62:	4b27      	ldr	r3, [pc, #156]	@ (8001b00 <retract+0xf0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	635a      	str	r2, [r3, #52]	@ 0x34

	retractCm += (measureSpeed()*(-1))*3.14*D;
 8001a6a:	f7ff fe9d 	bl	80017a8 <measureSpeed>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	425b      	negs	r3, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fcbe 	bl	80003f4 <__aeabi_i2d>
 8001a78:	a31b      	add	r3, pc, #108	@ (adr r3, 8001ae8 <retract+0xd8>)
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	f7fe fd23 	bl	80004c8 <__aeabi_dmul>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b04 <retract+0xf4>)
 8001a90:	f7fe fd1a 	bl	80004c8 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4614      	mov	r4, r2
 8001a9a:	461d      	mov	r5, r3
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <retract+0xf8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fca7 	bl	80003f4 <__aeabi_i2d>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4620      	mov	r0, r4
 8001aac:	4629      	mov	r1, r5
 8001aae:	f7fe fb55 	bl	800015c <__adddf3>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7fe ff17 	bl	80008ec <__aeabi_d2iz>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4a11      	ldr	r2, [pc, #68]	@ (8001b08 <retract+0xf8>)
 8001ac2:	6013      	str	r3, [r2, #0]
	TM1637_SetBrightness(&display, 7, 1);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2107      	movs	r1, #7
 8001ac8:	4810      	ldr	r0, [pc, #64]	@ (8001b0c <retract+0xfc>)
 8001aca:	f000 fb24 	bl	8002116 <TM1637_SetBrightness>
	TM1637_ShowNumberDec(&display, retractCm, 0, 4, 0);
 8001ace:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <retract+0xf8>)
 8001ad0:	6819      	ldr	r1, [r3, #0]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	2200      	movs	r2, #0
 8001ada:	480c      	ldr	r0, [pc, #48]	@ (8001b0c <retract+0xfc>)
 8001adc:	f000 fb84 	bl	80021e8 <TM1637_ShowNumberDec>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae8:	51eb851f 	.word	0x51eb851f
 8001aec:	40091eb8 	.word	0x40091eb8
 8001af0:	20000058 	.word	0x20000058
 8001af4:	00100101 	.word	0x00100101
 8001af8:	3e0f83e1 	.word	0x3e0f83e1
 8001afc:	200000d0 	.word	0x200000d0
 8001b00:	20000160 	.word	0x20000160
 8001b04:	40080000 	.word	0x40080000
 8001b08:	20000220 	.word	0x20000220
 8001b0c:	20000224 	.word	0x20000224

08001b10 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d102      	bne.n	8001b26 <HAL_GPIO_EXTI_Callback+0x16>
		button.autoManual = AUTOMATIC;
 8001b20:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	719a      	strb	r2, [r3, #6]
	}
	if(GPIO_Pin == GPIO_PIN_1){
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d102      	bne.n	8001b32 <HAL_GPIO_EXTI_Callback+0x22>
		button.retract = PRESS;
 8001b2c:	4b29      	ldr	r3, [pc, #164]	@ (8001bd4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	715a      	strb	r2, [r3, #5]
	}
	if(GPIO_Pin == GPIO_PIN_2){
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d108      	bne.n	8001b4a <HAL_GPIO_EXTI_Callback+0x3a>
		button.step1 = PRESS;
 8001b38:	4b26      	ldr	r3, [pc, #152]	@ (8001bd4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
		button.step2 = RELEASE;
 8001b3e:	4b25      	ldr	r3, [pc, #148]	@ (8001bd4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	705a      	strb	r2, [r3, #1]
		button.step3 = RELEASE;
 8001b44:	4b23      	ldr	r3, [pc, #140]	@ (8001bd4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	709a      	strb	r2, [r3, #2]
	}
	if(GPIO_Pin == GPIO_PIN_10){
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b50:	d108      	bne.n	8001b64 <HAL_GPIO_EXTI_Callback+0x54>
		button.step1 = RELEASE;
 8001b52:	4b20      	ldr	r3, [pc, #128]	@ (8001bd4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	701a      	strb	r2, [r3, #0]
		button.step2 = PRESS;
 8001b58:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	705a      	strb	r2, [r3, #1]
		button.step3 = RELEASE;
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	709a      	strb	r2, [r3, #2]
	}
	if(GPIO_Pin == GPIO_PIN_11){
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b6a:	d108      	bne.n	8001b7e <HAL_GPIO_EXTI_Callback+0x6e>
		button.step1 = RELEASE;
 8001b6c:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]
		button.step2 = RELEASE;
 8001b72:	4b18      	ldr	r3, [pc, #96]	@ (8001bd4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	705a      	strb	r2, [r3, #1]
		button.step3 = PRESS;
 8001b78:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	709a      	strb	r2, [r3, #2]
	}
	if(GPIO_Pin == GPIO_PIN_13){
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b84:	d102      	bne.n	8001b8c <HAL_GPIO_EXTI_Callback+0x7c>
		button.side = PRESS;
 8001b86:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == GPIO_PIN_12){
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b92:	d114      	bne.n	8001bbe <HAL_GPIO_EXTI_Callback+0xae>
		button.foot=!button.foot;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001b96:	78db      	ldrb	r3, [r3, #3]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf14      	ite	ne
 8001b9c:	2301      	movne	r3, #1
 8001b9e:	2300      	moveq	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f083 0301 	eor.w	r3, r3, #1
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001bb0:	70da      	strb	r2, [r3, #3]
		time.timePressFootStart = HAL_GetTick();
 8001bb2:	f000 fd9b 	bl	80026ec <HAL_GetTick>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b07      	ldr	r3, [pc, #28]	@ (8001bd8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001bbc:	609a      	str	r2, [r3, #8]
	}
	if(GPIO_Pin == GPIO_PIN_15){
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bc4:	d102      	bne.n	8001bcc <HAL_GPIO_EXTI_Callback+0xbc>
		motor.loadStatus = LOAD_HIGH;
 8001bc6:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <HAL_GPIO_EXTI_Callback+0xcc>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	751a      	strb	r2, [r3, #20]
	}
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200001f0 	.word	0x200001f0
 8001bd8:	20000210 	.word	0x20000210
 8001bdc:	200001f8 	.word	0x200001f8

08001be0 <checkLoadHigh>:

bool checkLoadHigh(){
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
	if(motor.loadStatus == LOAD_HIGH)
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <checkLoadHigh+0x20>)
 8001be6:	7d1b      	ldrb	r3, [r3, #20]
 8001be8:	f083 0301 	eor.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <checkLoadHigh+0x16>
		return true;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <checkLoadHigh+0x18>
	else
		return false;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	200001f8 	.word	0x200001f8

08001c04 <resetStatusButton>:

void resetStatusButton(){
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
	  button.autoManual = MANUAL;
 8001c08:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <resetStatusButton+0x20>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	719a      	strb	r2, [r3, #6]
	  button.foot = RELEASE;
 8001c0e:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <resetStatusButton+0x20>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	70da      	strb	r2, [r3, #3]
	  button.side = RELEASE;
 8001c14:	4b03      	ldr	r3, [pc, #12]	@ (8001c24 <resetStatusButton+0x20>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	711a      	strb	r2, [r3, #4]
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	200001f0 	.word	0x200001f0

08001c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2c:	b672      	cpsid	i
}
 8001c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <Error_Handler+0x8>

08001c34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c3a:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <HAL_MspInit+0x5c>)
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	4a14      	ldr	r2, [pc, #80]	@ (8001c90 <HAL_MspInit+0x5c>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6193      	str	r3, [r2, #24]
 8001c46:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <HAL_MspInit+0x5c>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	4b0f      	ldr	r3, [pc, #60]	@ (8001c90 <HAL_MspInit+0x5c>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4a0e      	ldr	r2, [pc, #56]	@ (8001c90 <HAL_MspInit+0x5c>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c5c:	61d3      	str	r3, [r2, #28]
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <HAL_MspInit+0x5c>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <HAL_MspInit+0x60>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	4a04      	ldr	r2, [pc, #16]	@ (8001c94 <HAL_MspInit+0x60>)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40010000 	.word	0x40010000

08001c98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	@ 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a28      	ldr	r2, [pc, #160]	@ (8001d54 <HAL_ADC_MspInit+0xbc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d122      	bne.n	8001cfe <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cb8:	4b27      	ldr	r3, [pc, #156]	@ (8001d58 <HAL_ADC_MspInit+0xc0>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a26      	ldr	r2, [pc, #152]	@ (8001d58 <HAL_ADC_MspInit+0xc0>)
 8001cbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b24      	ldr	r3, [pc, #144]	@ (8001d58 <HAL_ADC_MspInit+0xc0>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd0:	4b21      	ldr	r3, [pc, #132]	@ (8001d58 <HAL_ADC_MspInit+0xc0>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a20      	ldr	r2, [pc, #128]	@ (8001d58 <HAL_ADC_MspInit+0xc0>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d58 <HAL_ADC_MspInit+0xc0>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POTEN_1_Pin;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cec:	2303      	movs	r3, #3
 8001cee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POTEN_1_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 0318 	add.w	r3, r7, #24
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4819      	ldr	r0, [pc, #100]	@ (8001d5c <HAL_ADC_MspInit+0xc4>)
 8001cf8:	f001 f986 	bl	8003008 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001cfc:	e026      	b.n	8001d4c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a17      	ldr	r2, [pc, #92]	@ (8001d60 <HAL_ADC_MspInit+0xc8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d121      	bne.n	8001d4c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d08:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <HAL_ADC_MspInit+0xc0>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a12      	ldr	r2, [pc, #72]	@ (8001d58 <HAL_ADC_MspInit+0xc0>)
 8001d0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <HAL_ADC_MspInit+0xc0>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <HAL_ADC_MspInit+0xc0>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a0c      	ldr	r2, [pc, #48]	@ (8001d58 <HAL_ADC_MspInit+0xc0>)
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <HAL_ADC_MspInit+0xc0>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = POTEN_2_Pin;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POTEN_2_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 0318 	add.w	r3, r7, #24
 8001d44:	4619      	mov	r1, r3
 8001d46:	4805      	ldr	r0, [pc, #20]	@ (8001d5c <HAL_ADC_MspInit+0xc4>)
 8001d48:	f001 f95e 	bl	8003008 <HAL_GPIO_Init>
}
 8001d4c:	bf00      	nop
 8001d4e:	3728      	adds	r7, #40	@ 0x28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40012400 	.word	0x40012400
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40010800 	.word	0x40010800
 8001d60:	40012800 	.word	0x40012800

08001d64 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a16      	ldr	r2, [pc, #88]	@ (8001dd8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d124      	bne.n	8001dce <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d84:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x78>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	4a14      	ldr	r2, [pc, #80]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x78>)
 8001d8a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d8e:	6193      	str	r3, [r2, #24]
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x78>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x78>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	4a0e      	ldr	r2, [pc, #56]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x78>)
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	6193      	str	r3, [r2, #24]
 8001da8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x78>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001db4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001db8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	f107 0310 	add.w	r3, r7, #16
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001dca:	f001 f91d 	bl	8003008 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001dce:	bf00      	nop
 8001dd0:	3720      	adds	r7, #32
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40012c00 	.word	0x40012c00
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010800 	.word	0x40010800

08001de4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df4:	d10c      	bne.n	8001e10 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001df6:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <HAL_TIM_PWM_MspInit+0x58>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	4a10      	ldr	r2, [pc, #64]	@ (8001e3c <HAL_TIM_PWM_MspInit+0x58>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	61d3      	str	r3, [r2, #28]
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <HAL_TIM_PWM_MspInit+0x58>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e0e:	e010      	b.n	8001e32 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <HAL_TIM_PWM_MspInit+0x5c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10b      	bne.n	8001e32 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e1a:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <HAL_TIM_PWM_MspInit+0x58>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a07      	ldr	r2, [pc, #28]	@ (8001e3c <HAL_TIM_PWM_MspInit+0x58>)
 8001e20:	f043 0304 	orr.w	r3, r3, #4
 8001e24:	61d3      	str	r3, [r2, #28]
 8001e26:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_TIM_PWM_MspInit+0x58>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40000800 	.word	0x40000800

08001e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0d      	ldr	r2, [pc, #52]	@ (8001e88 <HAL_TIM_Base_MspInit+0x44>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d113      	bne.n	8001e7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e56:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <HAL_TIM_Base_MspInit+0x48>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e8c <HAL_TIM_Base_MspInit+0x48>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	61d3      	str	r3, [r2, #28]
 8001e62:	4b0a      	ldr	r3, [pc, #40]	@ (8001e8c <HAL_TIM_Base_MspInit+0x48>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	201d      	movs	r0, #29
 8001e74:	f001 f891 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e78:	201d      	movs	r0, #29
 8001e7a:	f001 f8aa 	bl	8002fd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40000400 	.word	0x40000400
 8001e8c:	40021000 	.word	0x40021000

08001e90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	@ 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eae:	d12a      	bne.n	8001f06 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb0:	4b25      	ldr	r3, [pc, #148]	@ (8001f48 <HAL_TIM_MspPostInit+0xb8>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	4a24      	ldr	r2, [pc, #144]	@ (8001f48 <HAL_TIM_MspPostInit+0xb8>)
 8001eb6:	f043 0308 	orr.w	r3, r3, #8
 8001eba:	6193      	str	r3, [r2, #24]
 8001ebc:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <HAL_TIM_MspPostInit+0xb8>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M_PWM1_Pin;
 8001ec8:	2308      	movs	r3, #8
 8001eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(M_PWM1_GPIO_Port, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	481c      	ldr	r0, [pc, #112]	@ (8001f4c <HAL_TIM_MspPostInit+0xbc>)
 8001edc:	f001 f894 	bl	8003008 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <HAL_TIM_MspPostInit+0xc0>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efe:	4a14      	ldr	r2, [pc, #80]	@ (8001f50 <HAL_TIM_MspPostInit+0xc0>)
 8001f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f02:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f04:	e01c      	b.n	8001f40 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM4)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a12      	ldr	r2, [pc, #72]	@ (8001f54 <HAL_TIM_MspPostInit+0xc4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d117      	bne.n	8001f40 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f10:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <HAL_TIM_MspPostInit+0xb8>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a0c      	ldr	r2, [pc, #48]	@ (8001f48 <HAL_TIM_MspPostInit+0xb8>)
 8001f16:	f043 0308 	orr.w	r3, r3, #8
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <HAL_TIM_MspPostInit+0xb8>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f28:	2340      	movs	r3, #64	@ 0x40
 8001f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2302      	movs	r3, #2
 8001f32:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4804      	ldr	r0, [pc, #16]	@ (8001f4c <HAL_TIM_MspPostInit+0xbc>)
 8001f3c:	f001 f864 	bl	8003008 <HAL_GPIO_Init>
}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	@ 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010c00 	.word	0x40010c00
 8001f50:	40010000 	.word	0x40010000
 8001f54:	40000800 	.word	0x40000800

08001f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe0 <HAL_UART_MspInit+0x88>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d12f      	bne.n	8001fd8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f78:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <HAL_UART_MspInit+0x8c>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	@ (8001fe4 <HAL_UART_MspInit+0x8c>)
 8001f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f82:	61d3      	str	r3, [r2, #28]
 8001f84:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <HAL_UART_MspInit+0x8c>)
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f90:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <HAL_UART_MspInit+0x8c>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	4a13      	ldr	r2, [pc, #76]	@ (8001fe4 <HAL_UART_MspInit+0x8c>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	6193      	str	r3, [r2, #24]
 8001f9c:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <HAL_UART_MspInit+0x8c>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fa8:	2304      	movs	r3, #4
 8001faa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480b      	ldr	r0, [pc, #44]	@ (8001fe8 <HAL_UART_MspInit+0x90>)
 8001fbc:	f001 f824 	bl	8003008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fc0:	2308      	movs	r3, #8
 8001fc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <HAL_UART_MspInit+0x90>)
 8001fd4:	f001 f818 	bl	8003008 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001fd8:	bf00      	nop
 8001fda:	3720      	adds	r7, #32
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40004400 	.word	0x40004400
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010800 	.word	0x40010800

08001fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <NMI_Handler+0x4>

08001ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <HardFault_Handler+0x4>

08001ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <MemManage_Handler+0x4>

08002004 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <BusFault_Handler+0x4>

0800200c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <UsageFault_Handler+0x4>

08002014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203c:	f000 fb44 	bl	80026c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}

08002044 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M_A_SW_Pin);
 8002048:	2001      	movs	r0, #1
 800204a:	f001 f991 	bl	8003370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}

08002052 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Retract_SW_Pin);
 8002056:	2002      	movs	r0, #2
 8002058:	f001 f98a 	bl	8003370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}

08002060 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rotary_SW_1_Pin);
 8002064:	2004      	movs	r0, #4
 8002066:	f001 f983 	bl	8003370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002074:	4802      	ldr	r0, [pc, #8]	@ (8002080 <TIM3_IRQHandler+0x10>)
 8002076:	f002 f91d 	bl	80042b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000118 	.word	0x20000118

08002084 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rotary_SW_2_Pin);
 8002088:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800208c:	f001 f970 	bl	8003370 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Rotary_SW_3_Pin);
 8002090:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002094:	f001 f96c 	bl	8003370 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Foot_SW_Pin);
 8002098:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800209c:	f001 f968 	bl	8003370 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_Side_Pin);
 80020a0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020a4:	f001 f964 	bl	8003370 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(nFAULT_Pin);
 80020a8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80020ac:	f001 f960 	bl	8003370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <TM1637_Init>:
void TM1637_ShowDots(uint8_t dots, uint8_t* digits);
uint8_t TM1637_EncodeDigit(uint8_t digit);

static const uint8_t minusSegments = 0b01000000;

void TM1637_Init(TM1637Display *display, GPIO_TypeDef *clk_port, uint16_t clk_pin, GPIO_TypeDef *dio_port, uint16_t dio_pin, uint32_t bit_delay) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	80fb      	strh	r3, [r7, #6]
    display->clk_port = clk_port;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	601a      	str	r2, [r3, #0]
    display->clk_pin = clk_pin;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	88fa      	ldrh	r2, [r7, #6]
 80020da:	809a      	strh	r2, [r3, #4]
    display->dio_port = dio_port;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	609a      	str	r2, [r3, #8]
    display->dio_pin = dio_pin;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8b3a      	ldrh	r2, [r7, #24]
 80020e6:	819a      	strh	r2, [r3, #12]
    display->bit_delay = bit_delay;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	69fa      	ldr	r2, [r7, #28]
 80020ec:	611a      	str	r2, [r3, #16]

    HAL_GPIO_WritePin(display->clk_port, display->clk_pin, GPIO_PIN_RESET);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	889b      	ldrh	r3, [r3, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	4619      	mov	r1, r3
 80020fa:	f001 f920 	bl	800333e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(display->dio_port, display->dio_pin, GPIO_PIN_RESET);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6898      	ldr	r0, [r3, #8]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	899b      	ldrh	r3, [r3, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	4619      	mov	r1, r3
 800210a:	f001 f918 	bl	800333e <HAL_GPIO_WritePin>
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <TM1637_SetBrightness>:

void TM1637_SetBrightness(TM1637Display *display, uint8_t brightness, uint8_t on) {
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	70fb      	strb	r3, [r7, #3]
 8002122:	4613      	mov	r3, r2
 8002124:	70bb      	strb	r3, [r7, #2]
    display->brightness = (brightness & 0x7) | (on ? 0x08 : 0x00);
 8002126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	b25b      	sxtb	r3, r3
 8002130:	78ba      	ldrb	r2, [r7, #2]
 8002132:	2a00      	cmp	r2, #0
 8002134:	d001      	beq.n	800213a <TM1637_SetBrightness+0x24>
 8002136:	2208      	movs	r2, #8
 8002138:	e000      	b.n	800213c <TM1637_SetBrightness+0x26>
 800213a:	2200      	movs	r2, #0
 800213c:	4313      	orrs	r3, r2
 800213e:	b25b      	sxtb	r3, r3
 8002140:	b2da      	uxtb	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	739a      	strb	r2, [r3, #14]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <TM1637_SetSegments>:

void TM1637_SetSegments(TM1637Display *display, const uint8_t segments[], uint8_t length, uint8_t pos) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	4611      	mov	r1, r2
 800215c:	461a      	mov	r2, r3
 800215e:	460b      	mov	r3, r1
 8002160:	71fb      	strb	r3, [r7, #7]
 8002162:	4613      	mov	r3, r2
 8002164:	71bb      	strb	r3, [r7, #6]

	// Write COMM1
    TM1637_Start(display);
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f926 	bl	80023b8 <TM1637_Start>
    TM1637_WriteByte(display, TM1637_I2C_COMM1);
 800216c:	2140      	movs	r1, #64	@ 0x40
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f988 	bl	8002484 <TM1637_WriteByte>
    TM1637_Stop(display);
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f94e 	bl	8002416 <TM1637_Stop>

    // Write COMM2 + first digit address
    TM1637_Start(display);
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f91c 	bl	80023b8 <TM1637_Start>
    TM1637_WriteByte(display, TM1637_I2C_COMM2 + (pos & 0x03));
 8002180:	79bb      	ldrb	r3, [r7, #6]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	3b40      	subs	r3, #64	@ 0x40
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4619      	mov	r1, r3
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f978 	bl	8002484 <TM1637_WriteByte>

    // Write the data bytes
    for (uint8_t k = 0; k < length; k++) {
 8002194:	2300      	movs	r3, #0
 8002196:	75fb      	strb	r3, [r7, #23]
 8002198:	e00a      	b.n	80021b0 <TM1637_SetSegments+0x60>
        TM1637_WriteByte(display, segments[k]);
 800219a:	7dfb      	ldrb	r3, [r7, #23]
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	4413      	add	r3, r2
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4619      	mov	r1, r3
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f96d 	bl	8002484 <TM1637_WriteByte>
    for (uint8_t k = 0; k < length; k++) {
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
 80021ac:	3301      	adds	r3, #1
 80021ae:	75fb      	strb	r3, [r7, #23]
 80021b0:	7dfa      	ldrb	r2, [r7, #23]
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d3f0      	bcc.n	800219a <TM1637_SetSegments+0x4a>
    }

    TM1637_Stop(display);
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f92c 	bl	8002416 <TM1637_Stop>

    // Write COMM3 + brightness
    TM1637_Start(display);
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 f8fa 	bl	80023b8 <TM1637_Start>
    TM1637_WriteByte(display, TM1637_I2C_COMM3 + (display->brightness & 0x0f));
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	7b9b      	ldrb	r3, [r3, #14]
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	3b80      	subs	r3, #128	@ 0x80
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4619      	mov	r1, r3
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f955 	bl	8002484 <TM1637_WriteByte>
    TM1637_Stop(display);
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f91b 	bl	8002416 <TM1637_Stop>
}
 80021e0:	bf00      	nop
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <TM1637_ShowNumberDec>:
void TM1637_Clear(TM1637Display *display) {
    uint8_t data[] = { 0, 0, 0, 0 };
    TM1637_SetSegments(display, data, 4, 0);
}

void TM1637_ShowNumberDec(TM1637Display *display, int num, bool leading_zero, uint8_t length, uint8_t pos) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	4611      	mov	r1, r2
 80021f4:	461a      	mov	r2, r3
 80021f6:	460b      	mov	r3, r1
 80021f8:	71fb      	strb	r3, [r7, #7]
 80021fa:	4613      	mov	r3, r2
 80021fc:	71bb      	strb	r3, [r7, #6]
    TM1637_ShowNumberDecEx(display, num, 0, leading_zero, length, pos);
 80021fe:	79fa      	ldrb	r2, [r7, #7]
 8002200:	7e3b      	ldrb	r3, [r7, #24]
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	79bb      	ldrb	r3, [r7, #6]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	4613      	mov	r3, r2
 800220a:	2200      	movs	r2, #0
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f804 	bl	800221c <TM1637_ShowNumberDecEx>
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <TM1637_ShowNumberDecEx>:

void TM1637_ShowNumberDecEx(TM1637Display *display, int num, uint8_t dots, bool leading_zero, uint8_t length, uint8_t pos) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af04      	add	r7, sp, #16
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	4611      	mov	r1, r2
 8002228:	461a      	mov	r2, r3
 800222a:	460b      	mov	r3, r1
 800222c:	71fb      	strb	r3, [r7, #7]
 800222e:	4613      	mov	r3, r2
 8002230:	71bb      	strb	r3, [r7, #6]
    TM1637_ShowNumberBaseEx(display, (num < 0) ? -10 : 10, (num < 0) ? -num : num, dots, leading_zero, length, pos);
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	da02      	bge.n	800223e <TM1637_ShowNumberDecEx+0x22>
 8002238:	f06f 0109 	mvn.w	r1, #9
 800223c:	e000      	b.n	8002240 <TM1637_ShowNumberDecEx+0x24>
 800223e:	210a      	movs	r1, #10
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	bfb8      	it	lt
 8002246:	425b      	neglt	r3, r3
 8002248:	b29a      	uxth	r2, r3
 800224a:	79f8      	ldrb	r0, [r7, #7]
 800224c:	7f3b      	ldrb	r3, [r7, #28]
 800224e:	9302      	str	r3, [sp, #8]
 8002250:	7e3b      	ldrb	r3, [r7, #24]
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	79bb      	ldrb	r3, [r7, #6]
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	4603      	mov	r3, r0
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 f804 	bl	8002268 <TM1637_ShowNumberBaseEx>
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <TM1637_ShowNumberBaseEx>:

void TM1637_ShowNumberHexEx(TM1637Display *display, uint16_t num, uint8_t dots, bool leading_zero, uint8_t length, uint8_t pos) {
    TM1637_ShowNumberBaseEx(display, 16, num, dots, leading_zero, length, pos);
}

void TM1637_ShowNumberBaseEx(TM1637Display *display, int8_t base, uint16_t num, uint8_t dots, bool leading_zero, uint8_t length, uint8_t pos) {
 8002268:	b590      	push	{r4, r7, lr}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	4608      	mov	r0, r1
 8002272:	4611      	mov	r1, r2
 8002274:	461a      	mov	r2, r3
 8002276:	4603      	mov	r3, r0
 8002278:	70fb      	strb	r3, [r7, #3]
 800227a:	460b      	mov	r3, r1
 800227c:	803b      	strh	r3, [r7, #0]
 800227e:	4613      	mov	r3, r2
 8002280:	70bb      	strb	r3, [r7, #2]
    bool negative = false;
 8002282:	2300      	movs	r3, #0
 8002284:	75fb      	strb	r3, [r7, #23]
    if (base < 0) {
 8002286:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800228a:	2b00      	cmp	r3, #0
 800228c:	da05      	bge.n	800229a <TM1637_ShowNumberBaseEx+0x32>
        base = -base;
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	425b      	negs	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	70fb      	strb	r3, [r7, #3]
        negative = true;
 8002296:	2301      	movs	r3, #1
 8002298:	75fb      	strb	r3, [r7, #23]
    }

    uint8_t digits[4] = {0};
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]

    if (num == 0 && !leading_zero) {
 800229e:	883b      	ldrh	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d126      	bne.n	80022f2 <TM1637_ShowNumberBaseEx+0x8a>
 80022a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022a8:	f083 0301 	eor.w	r3, r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d01f      	beq.n	80022f2 <TM1637_ShowNumberBaseEx+0x8a>
        // Singular case - take care separately
        for (uint8_t i = 0; i < (length - 1); i++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	75bb      	strb	r3, [r7, #22]
 80022b6:	e008      	b.n	80022ca <TM1637_ShowNumberBaseEx+0x62>
            digits[i] = 0;
 80022b8:	7dbb      	ldrb	r3, [r7, #22]
 80022ba:	3318      	adds	r3, #24
 80022bc:	443b      	add	r3, r7
 80022be:	2200      	movs	r2, #0
 80022c0:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (uint8_t i = 0; i < (length - 1); i++)
 80022c4:	7dbb      	ldrb	r3, [r7, #22]
 80022c6:	3301      	adds	r3, #1
 80022c8:	75bb      	strb	r3, [r7, #22]
 80022ca:	7dba      	ldrb	r2, [r7, #22]
 80022cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80022d0:	3b01      	subs	r3, #1
 80022d2:	429a      	cmp	r2, r3
 80022d4:	dbf0      	blt.n	80022b8 <TM1637_ShowNumberBaseEx+0x50>
        digits[length - 1] = TM1637_EncodeDigit(0);
 80022d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80022da:	1e5c      	subs	r4, r3, #1
 80022dc:	2000      	movs	r0, #0
 80022de:	f000 f975 	bl	80025cc <TM1637_EncodeDigit>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461a      	mov	r2, r3
 80022e6:	f104 0318 	add.w	r3, r4, #24
 80022ea:	443b      	add	r3, r7
 80022ec:	f803 2c10 	strb.w	r2, [r3, #-16]
 80022f0:	e04b      	b.n	800238a <TM1637_ShowNumberBaseEx+0x122>
    } else {
        for (int i = length - 1; i >= 0; --i) {
 80022f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80022f6:	3b01      	subs	r3, #1
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	e043      	b.n	8002384 <TM1637_ShowNumberBaseEx+0x11c>
            uint8_t digit = num % base;
 80022fc:	883b      	ldrh	r3, [r7, #0]
 80022fe:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8002302:	fb93 f1f2 	sdiv	r1, r3, r2
 8002306:	fb01 f202 	mul.w	r2, r1, r2
 800230a:	1a9b      	subs	r3, r3, r2
 800230c:	73fb      	strb	r3, [r7, #15]

            if (digit == 0 && num == 0 && !leading_zero)
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d110      	bne.n	8002336 <TM1637_ShowNumberBaseEx+0xce>
 8002314:	883b      	ldrh	r3, [r7, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10d      	bne.n	8002336 <TM1637_ShowNumberBaseEx+0xce>
 800231a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800231e:	f083 0301 	eor.w	r3, r3, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d006      	beq.n	8002336 <TM1637_ShowNumberBaseEx+0xce>
                // Leading zero is blank
                digits[i] = 0;
 8002328:	f107 0208 	add.w	r2, r7, #8
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4413      	add	r3, r2
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
 8002334:	e00b      	b.n	800234e <TM1637_ShowNumberBaseEx+0xe6>
            else
                digits[i] = TM1637_EncodeDigit(digit);
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f947 	bl	80025cc <TM1637_EncodeDigit>
 800233e:	4603      	mov	r3, r0
 8002340:	4619      	mov	r1, r3
 8002342:	f107 0208 	add.w	r2, r7, #8
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4413      	add	r3, r2
 800234a:	460a      	mov	r2, r1
 800234c:	701a      	strb	r2, [r3, #0]

            if (digit == 0 && num == 0 && negative) {
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10e      	bne.n	8002372 <TM1637_ShowNumberBaseEx+0x10a>
 8002354:	883b      	ldrh	r3, [r7, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10b      	bne.n	8002372 <TM1637_ShowNumberBaseEx+0x10a>
 800235a:	7dfb      	ldrb	r3, [r7, #23]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <TM1637_ShowNumberBaseEx+0x10a>
                digits[i] = minusSegments;
 8002360:	2140      	movs	r1, #64	@ 0x40
 8002362:	f107 0208 	add.w	r2, r7, #8
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4413      	add	r3, r2
 800236a:	460a      	mov	r2, r1
 800236c:	701a      	strb	r2, [r3, #0]
                negative = false;
 800236e:	2300      	movs	r3, #0
 8002370:	75fb      	strb	r3, [r7, #23]
            }

            num /= base;
 8002372:	883a      	ldrh	r2, [r7, #0]
 8002374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002378:	fb92 f3f3 	sdiv	r3, r2, r3
 800237c:	803b      	strh	r3, [r7, #0]
        for (int i = length - 1; i >= 0; --i) {
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	3b01      	subs	r3, #1
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	dab8      	bge.n	80022fc <TM1637_ShowNumberBaseEx+0x94>
        }
    }

    if (dots != 0) {
 800238a:	78bb      	ldrb	r3, [r7, #2]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <TM1637_ShowNumberBaseEx+0x136>
        TM1637_ShowDots(dots, digits);
 8002390:	f107 0208 	add.w	r2, r7, #8
 8002394:	78bb      	ldrb	r3, [r7, #2]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f000 f8ee 	bl	800257a <TM1637_ShowDots>
    }

    TM1637_SetSegments(display, digits, length, pos);
 800239e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80023a2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80023a6:	f107 0108 	add.w	r1, r7, #8
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fed0 	bl	8002150 <TM1637_SetSegments>
}
 80023b0:	bf00      	nop
 80023b2:	371c      	adds	r7, #28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd90      	pop	{r4, r7, pc}

080023b8 <TM1637_Start>:

void TM1637_Start(TM1637Display *display) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(display->dio_port, display->dio_pin, GPIO_PIN_SET);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6898      	ldr	r0, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	899b      	ldrh	r3, [r3, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	4619      	mov	r1, r3
 80023cc:	f000 ffb7 	bl	800333e <HAL_GPIO_WritePin>
    HAL_Delay(display->bit_delay);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f993 	bl	8002700 <HAL_Delay>
    HAL_GPIO_WritePin(display->clk_port, display->clk_pin, GPIO_PIN_SET);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	889b      	ldrh	r3, [r3, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	4619      	mov	r1, r3
 80023e6:	f000 ffaa 	bl	800333e <HAL_GPIO_WritePin>
    HAL_Delay(display->bit_delay);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f986 	bl	8002700 <HAL_Delay>
    HAL_GPIO_WritePin(display->dio_port, display->dio_pin, GPIO_PIN_RESET);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6898      	ldr	r0, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	899b      	ldrh	r3, [r3, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	4619      	mov	r1, r3
 8002400:	f000 ff9d 	bl	800333e <HAL_GPIO_WritePin>
    HAL_Delay(display->bit_delay);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	4618      	mov	r0, r3
 800240a:	f000 f979 	bl	8002700 <HAL_Delay>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <TM1637_Stop>:

void TM1637_Stop(TM1637Display *display) {
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(display->clk_port, display->clk_pin, GPIO_PIN_RESET);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	889b      	ldrh	r3, [r3, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	4619      	mov	r1, r3
 800242a:	f000 ff88 	bl	800333e <HAL_GPIO_WritePin>
    HAL_Delay(display->bit_delay);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f964 	bl	8002700 <HAL_Delay>
    HAL_GPIO_WritePin(display->dio_port, display->dio_pin, GPIO_PIN_RESET);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6898      	ldr	r0, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	899b      	ldrh	r3, [r3, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	4619      	mov	r1, r3
 8002444:	f000 ff7b 	bl	800333e <HAL_GPIO_WritePin>
    HAL_Delay(display->bit_delay);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	4618      	mov	r0, r3
 800244e:	f000 f957 	bl	8002700 <HAL_Delay>
    HAL_GPIO_WritePin(display->clk_port, display->clk_pin, GPIO_PIN_SET);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	889b      	ldrh	r3, [r3, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	4619      	mov	r1, r3
 800245e:	f000 ff6e 	bl	800333e <HAL_GPIO_WritePin>
    HAL_Delay(display->bit_delay);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f94a 	bl	8002700 <HAL_Delay>
    HAL_GPIO_WritePin(display->dio_port, display->dio_pin, GPIO_PIN_SET);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6898      	ldr	r0, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	899b      	ldrh	r3, [r3, #12]
 8002474:	2201      	movs	r2, #1
 8002476:	4619      	mov	r1, r3
 8002478:	f000 ff61 	bl	800333e <HAL_GPIO_WritePin>
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <TM1637_WriteByte>:

uint8_t TM1637_WriteByte(TM1637Display *display, uint8_t data) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	70fb      	strb	r3, [r7, #3]

	 // 8 Data Bits
    for (uint8_t i = 0; i < 8; i++) {
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	e035      	b.n	8002502 <TM1637_WriteByte+0x7e>

        // CLK low
        HAL_GPIO_WritePin(display->clk_port, display->clk_pin, GPIO_PIN_RESET);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	889b      	ldrh	r3, [r3, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	4619      	mov	r1, r3
 80024a2:	f000 ff4c 	bl	800333e <HAL_GPIO_WritePin>
        HAL_Delay(display->bit_delay);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f928 	bl	8002700 <HAL_Delay>

        // Set data bit
        if (data & 0x01) {
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <TM1637_WriteByte+0x48>
            HAL_GPIO_WritePin(display->dio_port, display->dio_pin, GPIO_PIN_SET);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6898      	ldr	r0, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	899b      	ldrh	r3, [r3, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	4619      	mov	r1, r3
 80024c6:	f000 ff3a 	bl	800333e <HAL_GPIO_WritePin>
 80024ca:	e007      	b.n	80024dc <TM1637_WriteByte+0x58>
        } else {
            HAL_GPIO_WritePin(display->dio_port, display->dio_pin, GPIO_PIN_RESET);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6898      	ldr	r0, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	899b      	ldrh	r3, [r3, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	4619      	mov	r1, r3
 80024d8:	f000 ff31 	bl	800333e <HAL_GPIO_WritePin>
        }
        data >>= 1;
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	70fb      	strb	r3, [r7, #3]
        // CLK high
        HAL_GPIO_WritePin(display->clk_port, display->clk_pin, GPIO_PIN_SET);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	889b      	ldrh	r3, [r3, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	4619      	mov	r1, r3
 80024ee:	f000 ff26 	bl	800333e <HAL_GPIO_WritePin>
        HAL_Delay(display->bit_delay);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f902 	bl	8002700 <HAL_Delay>
    for (uint8_t i = 0; i < 8; i++) {
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	3301      	adds	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	2b07      	cmp	r3, #7
 8002506:	d9c6      	bls.n	8002496 <TM1637_WriteByte+0x12>
    }

    HAL_GPIO_WritePin(display->clk_port, display->clk_pin, GPIO_PIN_RESET);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	889b      	ldrh	r3, [r3, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	4619      	mov	r1, r3
 8002514:	f000 ff13 	bl	800333e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(display->dio_port, display->dio_pin, GPIO_PIN_SET);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6898      	ldr	r0, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	899b      	ldrh	r3, [r3, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	4619      	mov	r1, r3
 8002524:	f000 ff0b 	bl	800333e <HAL_GPIO_WritePin>
    HAL_Delay(display->bit_delay);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	4618      	mov	r0, r3
 800252e:	f000 f8e7 	bl	8002700 <HAL_Delay>

    HAL_GPIO_WritePin(display->clk_port, display->clk_pin, GPIO_PIN_SET);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	889b      	ldrh	r3, [r3, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	4619      	mov	r1, r3
 800253e:	f000 fefe 	bl	800333e <HAL_GPIO_WritePin>
    HAL_Delay(display->bit_delay);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f8da 	bl	8002700 <HAL_Delay>

    uint8_t ack = HAL_GPIO_ReadPin(display->dio_port, display->dio_pin);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	899b      	ldrh	r3, [r3, #12]
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f000 feda 	bl	8003310 <HAL_GPIO_ReadPin>
 800255c:	4603      	mov	r3, r0
 800255e:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(display->clk_port, display->clk_pin, GPIO_PIN_RESET);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	889b      	ldrh	r3, [r3, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	4619      	mov	r1, r3
 800256c:	f000 fee7 	bl	800333e <HAL_GPIO_WritePin>

    return ack;
 8002570:	7bbb      	ldrb	r3, [r7, #14]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <TM1637_ShowDots>:

void TM1637_ShowDots(uint8_t dots, uint8_t* digits) {
 800257a:	b480      	push	{r7}
 800257c:	b085      	sub	sp, #20
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	6039      	str	r1, [r7, #0]
 8002584:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 4; ++i) {
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	e016      	b.n	80025ba <TM1637_ShowDots+0x40>
        digits[i] |= (dots & 0x80);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	4413      	add	r3, r2
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	b25a      	sxtb	r2, r3
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800259e:	b25b      	sxtb	r3, r3
 80025a0:	4313      	orrs	r3, r2
 80025a2:	b259      	sxtb	r1, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	4413      	add	r3, r2
 80025aa:	b2ca      	uxtb	r2, r1
 80025ac:	701a      	strb	r2, [r3, #0]
        dots <<= 1;
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 4; ++i) {
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3301      	adds	r3, #1
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	dde5      	ble.n	800258c <TM1637_ShowDots+0x12>
    }
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <TM1637_EncodeDigit>:

uint8_t TM1637_EncodeDigit(uint8_t digit) {
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
    return digitToSegment[digit & 0x0F];
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	4a03      	ldr	r2, [pc, #12]	@ (80025ec <TM1637_EncodeDigit+0x20>)
 80025de:	5cd3      	ldrb	r3, [r2, r3]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	08005084 	.word	0x08005084

080025f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025f0:	f7ff fd60 	bl	80020b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f4:	480b      	ldr	r0, [pc, #44]	@ (8002624 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025f6:	490c      	ldr	r1, [pc, #48]	@ (8002628 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025f8:	4a0c      	ldr	r2, [pc, #48]	@ (800262c <LoopFillZerobss+0x16>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025fc:	e002      	b.n	8002604 <LoopCopyDataInit>

080025fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002602:	3304      	adds	r3, #4

08002604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002608:	d3f9      	bcc.n	80025fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800260a:	4a09      	ldr	r2, [pc, #36]	@ (8002630 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800260c:	4c09      	ldr	r4, [pc, #36]	@ (8002634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002610:	e001      	b.n	8002616 <LoopFillZerobss>

08002612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002614:	3204      	adds	r2, #4

08002616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002618:	d3fb      	bcc.n	8002612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800261a:	f002 fcf7 	bl	800500c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800261e:	f7fe fba7 	bl	8000d70 <main>
  bx lr
 8002622:	4770      	bx	lr
  ldr r0, =_sdata
 8002624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002628:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800262c:	080050b0 	.word	0x080050b0
  ldr r2, =_sbss
 8002630:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002634:	2000023c 	.word	0x2000023c

08002638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002638:	e7fe      	b.n	8002638 <ADC1_2_IRQHandler>
	...

0800263c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002640:	4b08      	ldr	r3, [pc, #32]	@ (8002664 <HAL_Init+0x28>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a07      	ldr	r2, [pc, #28]	@ (8002664 <HAL_Init+0x28>)
 8002646:	f043 0310 	orr.w	r3, r3, #16
 800264a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800264c:	2003      	movs	r0, #3
 800264e:	f000 fc99 	bl	8002f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002652:	200f      	movs	r0, #15
 8002654:	f000 f808 	bl	8002668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002658:	f7ff faec 	bl	8001c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40022000 	.word	0x40022000

08002668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002670:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <HAL_InitTick+0x54>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <HAL_InitTick+0x58>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	4619      	mov	r1, r3
 800267a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800267e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002682:	fbb2 f3f3 	udiv	r3, r2, r3
 8002686:	4618      	mov	r0, r3
 8002688:	f000 fcb1 	bl	8002fee <HAL_SYSTICK_Config>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e00e      	b.n	80026b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b0f      	cmp	r3, #15
 800269a:	d80a      	bhi.n	80026b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800269c:	2200      	movs	r2, #0
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295
 80026a4:	f000 fc79 	bl	8002f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a8:	4a06      	ldr	r2, [pc, #24]	@ (80026c4 <HAL_InitTick+0x5c>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e000      	b.n	80026b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000008 	.word	0x20000008
 80026c4:	20000004 	.word	0x20000004

080026c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026cc:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <HAL_IncTick+0x1c>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <HAL_IncTick+0x20>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	4a03      	ldr	r2, [pc, #12]	@ (80026e8 <HAL_IncTick+0x20>)
 80026da:	6013      	str	r3, [r2, #0]
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr
 80026e4:	20000008 	.word	0x20000008
 80026e8:	20000238 	.word	0x20000238

080026ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return uwTick;
 80026f0:	4b02      	ldr	r3, [pc, #8]	@ (80026fc <HAL_GetTick+0x10>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	20000238 	.word	0x20000238

08002700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff fff0 	bl	80026ec <HAL_GetTick>
 800270c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d005      	beq.n	8002726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800271a:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <HAL_Delay+0x44>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4413      	add	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002726:	bf00      	nop
 8002728:	f7ff ffe0 	bl	80026ec <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	429a      	cmp	r2, r3
 8002736:	d8f7      	bhi.n	8002728 <HAL_Delay+0x28>
  {
  }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000008 	.word	0x20000008

08002748 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e0be      	b.n	80028e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002774:	2b00      	cmp	r3, #0
 8002776:	d109      	bne.n	800278c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff fa86 	bl	8001c98 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 faeb 	bl	8002d68 <ADC_ConversionStop_Disable>
 8002792:	4603      	mov	r3, r0
 8002794:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f040 8099 	bne.w	80028d6 <HAL_ADC_Init+0x18e>
 80027a4:	7dfb      	ldrb	r3, [r7, #23]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f040 8095 	bne.w	80028d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80027b4:	f023 0302 	bic.w	r3, r3, #2
 80027b8:	f043 0202 	orr.w	r2, r3, #2
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	7b1b      	ldrb	r3, [r3, #12]
 80027ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027e0:	d003      	beq.n	80027ea <HAL_ADC_Init+0xa2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d102      	bne.n	80027f0 <HAL_ADC_Init+0xa8>
 80027ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027ee:	e000      	b.n	80027f2 <HAL_ADC_Init+0xaa>
 80027f0:	2300      	movs	r3, #0
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7d1b      	ldrb	r3, [r3, #20]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d119      	bne.n	8002834 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	7b1b      	ldrb	r3, [r3, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d109      	bne.n	800281c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	3b01      	subs	r3, #1
 800280e:	035a      	lsls	r2, r3, #13
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	e00b      	b.n	8002834 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002820:	f043 0220 	orr.w	r2, r3, #32
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282c:	f043 0201 	orr.w	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	430a      	orrs	r2, r1
 8002846:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	4b28      	ldr	r3, [pc, #160]	@ (80028f0 <HAL_ADC_Init+0x1a8>)
 8002850:	4013      	ands	r3, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6812      	ldr	r2, [r2, #0]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	430b      	orrs	r3, r1
 800285a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002864:	d003      	beq.n	800286e <HAL_ADC_Init+0x126>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d104      	bne.n	8002878 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	3b01      	subs	r3, #1
 8002874:	051b      	lsls	r3, r3, #20
 8002876:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	430a      	orrs	r2, r1
 800288a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	4b18      	ldr	r3, [pc, #96]	@ (80028f4 <HAL_ADC_Init+0x1ac>)
 8002894:	4013      	ands	r3, r2
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	429a      	cmp	r2, r3
 800289a:	d10b      	bne.n	80028b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a6:	f023 0303 	bic.w	r3, r3, #3
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028b2:	e018      	b.n	80028e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b8:	f023 0312 	bic.w	r3, r3, #18
 80028bc:	f043 0210 	orr.w	r2, r3, #16
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c8:	f043 0201 	orr.w	r2, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028d4:	e007      	b.n	80028e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028da:	f043 0210 	orr.w	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	ffe1f7fd 	.word	0xffe1f7fd
 80028f4:	ff1f0efe 	.word	0xff1f0efe

080028f8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_ADC_Start+0x1a>
 800290e:	2302      	movs	r3, #2
 8002910:	e098      	b.n	8002a44 <HAL_ADC_Start+0x14c>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f9ca 	bl	8002cb4 <ADC_Enable>
 8002920:	4603      	mov	r3, r0
 8002922:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 8087 	bne.w	8002a3a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002930:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a41      	ldr	r2, [pc, #260]	@ (8002a4c <HAL_ADC_Start+0x154>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d105      	bne.n	8002956 <HAL_ADC_Start+0x5e>
 800294a:	4b41      	ldr	r3, [pc, #260]	@ (8002a50 <HAL_ADC_Start+0x158>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d115      	bne.n	8002982 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d026      	beq.n	80029be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002974:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002978:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002980:	e01d      	b.n	80029be <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002986:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a2f      	ldr	r2, [pc, #188]	@ (8002a50 <HAL_ADC_Start+0x158>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d004      	beq.n	80029a2 <HAL_ADC_Start+0xaa>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a2b      	ldr	r2, [pc, #172]	@ (8002a4c <HAL_ADC_Start+0x154>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d10d      	bne.n	80029be <HAL_ADC_Start+0xc6>
 80029a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a50 <HAL_ADC_Start+0x158>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ce:	f023 0206 	bic.w	r2, r3, #6
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029d6:	e002      	b.n	80029de <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f06f 0202 	mvn.w	r2, #2
 80029ee:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80029fa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80029fe:	d113      	bne.n	8002a28 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a04:	4a11      	ldr	r2, [pc, #68]	@ (8002a4c <HAL_ADC_Start+0x154>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d105      	bne.n	8002a16 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002a0a:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <HAL_ADC_Start+0x158>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d108      	bne.n	8002a28 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002a24:	609a      	str	r2, [r3, #8]
 8002a26:	e00c      	b.n	8002a42 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	e003      	b.n	8002a42 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40012800 	.word	0x40012800
 8002a50:	40012400 	.word	0x40012400

08002a54 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_Stop+0x1a>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e01a      	b.n	8002aa4 <HAL_ADC_Stop+0x50>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f976 	bl	8002d68 <ADC_ConversionStop_Disable>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	f043 0201 	orr.w	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x20>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e0dc      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x1da>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b06      	cmp	r3, #6
 8002af2:	d81c      	bhi.n	8002b2e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	3b05      	subs	r3, #5
 8002b06:	221f      	movs	r2, #31
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	4019      	ands	r1, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3b05      	subs	r3, #5
 8002b20:	fa00 f203 	lsl.w	r2, r0, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b2c:	e03c      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b0c      	cmp	r3, #12
 8002b34:	d81c      	bhi.n	8002b70 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	3b23      	subs	r3, #35	@ 0x23
 8002b48:	221f      	movs	r2, #31
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	4019      	ands	r1, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	3b23      	subs	r3, #35	@ 0x23
 8002b62:	fa00 f203 	lsl.w	r2, r0, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b6e:	e01b      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	3b41      	subs	r3, #65	@ 0x41
 8002b82:	221f      	movs	r2, #31
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	4019      	ands	r1, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	3b41      	subs	r3, #65	@ 0x41
 8002b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b09      	cmp	r3, #9
 8002bae:	d91c      	bls.n	8002bea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68d9      	ldr	r1, [r3, #12]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3b1e      	subs	r3, #30
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	4019      	ands	r1, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6898      	ldr	r0, [r3, #8]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	3b1e      	subs	r3, #30
 8002bdc:	fa00 f203 	lsl.w	r2, r0, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	60da      	str	r2, [r3, #12]
 8002be8:	e019      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6919      	ldr	r1, [r3, #16]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	2207      	movs	r2, #7
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	4019      	ands	r1, r3
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6898      	ldr	r0, [r3, #8]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4413      	add	r3, r2
 8002c12:	fa00 f203 	lsl.w	r2, r0, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b10      	cmp	r3, #16
 8002c24:	d003      	beq.n	8002c2e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c2a:	2b11      	cmp	r3, #17
 8002c2c:	d132      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d125      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d126      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002c54:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d11a      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c5e:	4b13      	ldr	r3, [pc, #76]	@ (8002cac <HAL_ADC_ConfigChannel+0x1e8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a13      	ldr	r2, [pc, #76]	@ (8002cb0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	0c9a      	lsrs	r2, r3, #18
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c74:	e002      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f9      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x1b2>
 8002c82:	e007      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c88:	f043 0220 	orr.w	r2, r3, #32
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr
 8002ca8:	40012400 	.word	0x40012400
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	431bde83 	.word	0x431bde83

08002cb4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d040      	beq.n	8002d54 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0201 	orr.w	r2, r2, #1
 8002ce0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d60 <ADC_Enable+0xac>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d64 <ADC_Enable+0xb0>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	0c9b      	lsrs	r3, r3, #18
 8002cee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cf0:	e002      	b.n	8002cf8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f9      	bne.n	8002cf2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cfe:	f7ff fcf5 	bl	80026ec <HAL_GetTick>
 8002d02:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d04:	e01f      	b.n	8002d46 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d06:	f7ff fcf1 	bl	80026ec <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d918      	bls.n	8002d46 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d011      	beq.n	8002d46 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d26:	f043 0210 	orr.w	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d32:	f043 0201 	orr.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e007      	b.n	8002d56 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d1d8      	bne.n	8002d06 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000000 	.word	0x20000000
 8002d64:	431bde83 	.word	0x431bde83

08002d68 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d12e      	bne.n	8002de0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0201 	bic.w	r2, r2, #1
 8002d90:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d92:	f7ff fcab 	bl	80026ec <HAL_GetTick>
 8002d96:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d98:	e01b      	b.n	8002dd2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d9a:	f7ff fca7 	bl	80026ec <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d914      	bls.n	8002dd2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d10d      	bne.n	8002dd2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dba:	f043 0210 	orr.w	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e007      	b.n	8002de2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d0dc      	beq.n	8002d9a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <__NVIC_SetPriorityGrouping+0x44>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e1e:	4a04      	ldr	r2, [pc, #16]	@ (8002e30 <__NVIC_SetPriorityGrouping+0x44>)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	60d3      	str	r3, [r2, #12]
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e38:	4b04      	ldr	r3, [pc, #16]	@ (8002e4c <__NVIC_GetPriorityGrouping+0x18>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	0a1b      	lsrs	r3, r3, #8
 8002e3e:	f003 0307 	and.w	r3, r3, #7
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	db0b      	blt.n	8002e7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	f003 021f 	and.w	r2, r3, #31
 8002e68:	4906      	ldr	r1, [pc, #24]	@ (8002e84 <__NVIC_EnableIRQ+0x34>)
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	2001      	movs	r0, #1
 8002e72:	fa00 f202 	lsl.w	r2, r0, r2
 8002e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	e000e100 	.word	0xe000e100

08002e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	6039      	str	r1, [r7, #0]
 8002e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	db0a      	blt.n	8002eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	490c      	ldr	r1, [pc, #48]	@ (8002ed4 <__NVIC_SetPriority+0x4c>)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb0:	e00a      	b.n	8002ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4908      	ldr	r1, [pc, #32]	@ (8002ed8 <__NVIC_SetPriority+0x50>)
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	3b04      	subs	r3, #4
 8002ec0:	0112      	lsls	r2, r2, #4
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	761a      	strb	r2, [r3, #24]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	e000e100 	.word	0xe000e100
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	@ 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f1c3 0307 	rsb	r3, r3, #7
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	bf28      	it	cs
 8002efa:	2304      	movcs	r3, #4
 8002efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d902      	bls.n	8002f0c <NVIC_EncodePriority+0x30>
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3b03      	subs	r3, #3
 8002f0a:	e000      	b.n	8002f0e <NVIC_EncodePriority+0x32>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	401a      	ands	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f24:	f04f 31ff 	mov.w	r1, #4294967295
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2e:	43d9      	mvns	r1, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	4313      	orrs	r3, r2
         );
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3724      	adds	r7, #36	@ 0x24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f50:	d301      	bcc.n	8002f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00f      	b.n	8002f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f56:	4a0a      	ldr	r2, [pc, #40]	@ (8002f80 <SysTick_Config+0x40>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5e:	210f      	movs	r1, #15
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	f7ff ff90 	bl	8002e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f68:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <SysTick_Config+0x40>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6e:	4b04      	ldr	r3, [pc, #16]	@ (8002f80 <SysTick_Config+0x40>)
 8002f70:	2207      	movs	r2, #7
 8002f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	e000e010 	.word	0xe000e010

08002f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff2d 	bl	8002dec <__NVIC_SetPriorityGrouping>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fac:	f7ff ff42 	bl	8002e34 <__NVIC_GetPriorityGrouping>
 8002fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	6978      	ldr	r0, [r7, #20]
 8002fb8:	f7ff ff90 	bl	8002edc <NVIC_EncodePriority>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff5f 	bl	8002e88 <__NVIC_SetPriority>
}
 8002fca:	bf00      	nop
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff ff35 	bl	8002e50 <__NVIC_EnableIRQ>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ffa2 	bl	8002f40 <SysTick_Config>
 8002ffc:	4603      	mov	r3, r0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003008:	b480      	push	{r7}
 800300a:	b08b      	sub	sp, #44	@ 0x2c
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003012:	2300      	movs	r3, #0
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003016:	2300      	movs	r3, #0
 8003018:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800301a:	e169      	b.n	80032f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800301c:	2201      	movs	r2, #1
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	429a      	cmp	r2, r3
 8003036:	f040 8158 	bne.w	80032ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4a9a      	ldr	r2, [pc, #616]	@ (80032a8 <HAL_GPIO_Init+0x2a0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d05e      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
 8003044:	4a98      	ldr	r2, [pc, #608]	@ (80032a8 <HAL_GPIO_Init+0x2a0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d875      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 800304a:	4a98      	ldr	r2, [pc, #608]	@ (80032ac <HAL_GPIO_Init+0x2a4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d058      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
 8003050:	4a96      	ldr	r2, [pc, #600]	@ (80032ac <HAL_GPIO_Init+0x2a4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d86f      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 8003056:	4a96      	ldr	r2, [pc, #600]	@ (80032b0 <HAL_GPIO_Init+0x2a8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d052      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
 800305c:	4a94      	ldr	r2, [pc, #592]	@ (80032b0 <HAL_GPIO_Init+0x2a8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d869      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 8003062:	4a94      	ldr	r2, [pc, #592]	@ (80032b4 <HAL_GPIO_Init+0x2ac>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d04c      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
 8003068:	4a92      	ldr	r2, [pc, #584]	@ (80032b4 <HAL_GPIO_Init+0x2ac>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d863      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 800306e:	4a92      	ldr	r2, [pc, #584]	@ (80032b8 <HAL_GPIO_Init+0x2b0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d046      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
 8003074:	4a90      	ldr	r2, [pc, #576]	@ (80032b8 <HAL_GPIO_Init+0x2b0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d85d      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 800307a:	2b12      	cmp	r3, #18
 800307c:	d82a      	bhi.n	80030d4 <HAL_GPIO_Init+0xcc>
 800307e:	2b12      	cmp	r3, #18
 8003080:	d859      	bhi.n	8003136 <HAL_GPIO_Init+0x12e>
 8003082:	a201      	add	r2, pc, #4	@ (adr r2, 8003088 <HAL_GPIO_Init+0x80>)
 8003084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003088:	08003103 	.word	0x08003103
 800308c:	080030dd 	.word	0x080030dd
 8003090:	080030ef 	.word	0x080030ef
 8003094:	08003131 	.word	0x08003131
 8003098:	08003137 	.word	0x08003137
 800309c:	08003137 	.word	0x08003137
 80030a0:	08003137 	.word	0x08003137
 80030a4:	08003137 	.word	0x08003137
 80030a8:	08003137 	.word	0x08003137
 80030ac:	08003137 	.word	0x08003137
 80030b0:	08003137 	.word	0x08003137
 80030b4:	08003137 	.word	0x08003137
 80030b8:	08003137 	.word	0x08003137
 80030bc:	08003137 	.word	0x08003137
 80030c0:	08003137 	.word	0x08003137
 80030c4:	08003137 	.word	0x08003137
 80030c8:	08003137 	.word	0x08003137
 80030cc:	080030e5 	.word	0x080030e5
 80030d0:	080030f9 	.word	0x080030f9
 80030d4:	4a79      	ldr	r2, [pc, #484]	@ (80032bc <HAL_GPIO_Init+0x2b4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d013      	beq.n	8003102 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030da:	e02c      	b.n	8003136 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	623b      	str	r3, [r7, #32]
          break;
 80030e2:	e029      	b.n	8003138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	3304      	adds	r3, #4
 80030ea:	623b      	str	r3, [r7, #32]
          break;
 80030ec:	e024      	b.n	8003138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	3308      	adds	r3, #8
 80030f4:	623b      	str	r3, [r7, #32]
          break;
 80030f6:	e01f      	b.n	8003138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	330c      	adds	r3, #12
 80030fe:	623b      	str	r3, [r7, #32]
          break;
 8003100:	e01a      	b.n	8003138 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d102      	bne.n	8003110 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800310a:	2304      	movs	r3, #4
 800310c:	623b      	str	r3, [r7, #32]
          break;
 800310e:	e013      	b.n	8003138 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d105      	bne.n	8003124 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003118:	2308      	movs	r3, #8
 800311a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	611a      	str	r2, [r3, #16]
          break;
 8003122:	e009      	b.n	8003138 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003124:	2308      	movs	r3, #8
 8003126:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	615a      	str	r2, [r3, #20]
          break;
 800312e:	e003      	b.n	8003138 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003130:	2300      	movs	r3, #0
 8003132:	623b      	str	r3, [r7, #32]
          break;
 8003134:	e000      	b.n	8003138 <HAL_GPIO_Init+0x130>
          break;
 8003136:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2bff      	cmp	r3, #255	@ 0xff
 800313c:	d801      	bhi.n	8003142 <HAL_GPIO_Init+0x13a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	e001      	b.n	8003146 <HAL_GPIO_Init+0x13e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3304      	adds	r3, #4
 8003146:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2bff      	cmp	r3, #255	@ 0xff
 800314c:	d802      	bhi.n	8003154 <HAL_GPIO_Init+0x14c>
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	e002      	b.n	800315a <HAL_GPIO_Init+0x152>
 8003154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003156:	3b08      	subs	r3, #8
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	210f      	movs	r1, #15
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	fa01 f303 	lsl.w	r3, r1, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	401a      	ands	r2, r3
 800316c:	6a39      	ldr	r1, [r7, #32]
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	431a      	orrs	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 80b1 	beq.w	80032ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003188:	4b4d      	ldr	r3, [pc, #308]	@ (80032c0 <HAL_GPIO_Init+0x2b8>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	4a4c      	ldr	r2, [pc, #304]	@ (80032c0 <HAL_GPIO_Init+0x2b8>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6193      	str	r3, [r2, #24]
 8003194:	4b4a      	ldr	r3, [pc, #296]	@ (80032c0 <HAL_GPIO_Init+0x2b8>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031a0:	4a48      	ldr	r2, [pc, #288]	@ (80032c4 <HAL_GPIO_Init+0x2bc>)
 80031a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	3302      	adds	r3, #2
 80031a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	220f      	movs	r2, #15
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4013      	ands	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a40      	ldr	r2, [pc, #256]	@ (80032c8 <HAL_GPIO_Init+0x2c0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d013      	beq.n	80031f4 <HAL_GPIO_Init+0x1ec>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a3f      	ldr	r2, [pc, #252]	@ (80032cc <HAL_GPIO_Init+0x2c4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00d      	beq.n	80031f0 <HAL_GPIO_Init+0x1e8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a3e      	ldr	r2, [pc, #248]	@ (80032d0 <HAL_GPIO_Init+0x2c8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d007      	beq.n	80031ec <HAL_GPIO_Init+0x1e4>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a3d      	ldr	r2, [pc, #244]	@ (80032d4 <HAL_GPIO_Init+0x2cc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d101      	bne.n	80031e8 <HAL_GPIO_Init+0x1e0>
 80031e4:	2303      	movs	r3, #3
 80031e6:	e006      	b.n	80031f6 <HAL_GPIO_Init+0x1ee>
 80031e8:	2304      	movs	r3, #4
 80031ea:	e004      	b.n	80031f6 <HAL_GPIO_Init+0x1ee>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e002      	b.n	80031f6 <HAL_GPIO_Init+0x1ee>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <HAL_GPIO_Init+0x1ee>
 80031f4:	2300      	movs	r3, #0
 80031f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f8:	f002 0203 	and.w	r2, r2, #3
 80031fc:	0092      	lsls	r2, r2, #2
 80031fe:	4093      	lsls	r3, r2
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003206:	492f      	ldr	r1, [pc, #188]	@ (80032c4 <HAL_GPIO_Init+0x2bc>)
 8003208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320a:	089b      	lsrs	r3, r3, #2
 800320c:	3302      	adds	r3, #2
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d006      	beq.n	800322e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003220:	4b2d      	ldr	r3, [pc, #180]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	492c      	ldr	r1, [pc, #176]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	608b      	str	r3, [r1, #8]
 800322c:	e006      	b.n	800323c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800322e:	4b2a      	ldr	r3, [pc, #168]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	43db      	mvns	r3, r3
 8003236:	4928      	ldr	r1, [pc, #160]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003238:	4013      	ands	r3, r2
 800323a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d006      	beq.n	8003256 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003248:	4b23      	ldr	r3, [pc, #140]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	4922      	ldr	r1, [pc, #136]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	4313      	orrs	r3, r2
 8003252:	60cb      	str	r3, [r1, #12]
 8003254:	e006      	b.n	8003264 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003256:	4b20      	ldr	r3, [pc, #128]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	43db      	mvns	r3, r3
 800325e:	491e      	ldr	r1, [pc, #120]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003260:	4013      	ands	r3, r2
 8003262:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d006      	beq.n	800327e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003270:	4b19      	ldr	r3, [pc, #100]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	4918      	ldr	r1, [pc, #96]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
 800327c:	e006      	b.n	800328c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800327e:	4b16      	ldr	r3, [pc, #88]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	43db      	mvns	r3, r3
 8003286:	4914      	ldr	r1, [pc, #80]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 8003288:	4013      	ands	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d021      	beq.n	80032dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003298:	4b0f      	ldr	r3, [pc, #60]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	490e      	ldr	r1, [pc, #56]	@ (80032d8 <HAL_GPIO_Init+0x2d0>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	600b      	str	r3, [r1, #0]
 80032a4:	e021      	b.n	80032ea <HAL_GPIO_Init+0x2e2>
 80032a6:	bf00      	nop
 80032a8:	10320000 	.word	0x10320000
 80032ac:	10310000 	.word	0x10310000
 80032b0:	10220000 	.word	0x10220000
 80032b4:	10210000 	.word	0x10210000
 80032b8:	10120000 	.word	0x10120000
 80032bc:	10110000 	.word	0x10110000
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40010000 	.word	0x40010000
 80032c8:	40010800 	.word	0x40010800
 80032cc:	40010c00 	.word	0x40010c00
 80032d0:	40011000 	.word	0x40011000
 80032d4:	40011400 	.word	0x40011400
 80032d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032dc:	4b0b      	ldr	r3, [pc, #44]	@ (800330c <HAL_GPIO_Init+0x304>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	4909      	ldr	r1, [pc, #36]	@ (800330c <HAL_GPIO_Init+0x304>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ec:	3301      	adds	r3, #1
 80032ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f6:	fa22 f303 	lsr.w	r3, r2, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f47f ae8e 	bne.w	800301c <HAL_GPIO_Init+0x14>
  }
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	372c      	adds	r7, #44	@ 0x2c
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	40010400 	.word	0x40010400

08003310 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	887b      	ldrh	r3, [r7, #2]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
 800332c:	e001      	b.n	8003332 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr

0800333e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	807b      	strh	r3, [r7, #2]
 800334a:	4613      	mov	r3, r2
 800334c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800334e:	787b      	ldrb	r3, [r7, #1]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003354:	887a      	ldrh	r2, [r7, #2]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800335a:	e003      	b.n	8003364 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	041a      	lsls	r2, r3, #16
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	611a      	str	r2, [r3, #16]
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
	...

08003370 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800337a:	4b08      	ldr	r3, [pc, #32]	@ (800339c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	88fb      	ldrh	r3, [r7, #6]
 8003380:	4013      	ands	r3, r2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003386:	4a05      	ldr	r2, [pc, #20]	@ (800339c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800338c:	88fb      	ldrh	r3, [r7, #6]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe fbbe 	bl	8001b10 <HAL_GPIO_EXTI_Callback>
  }
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40010400 	.word	0x40010400

080033a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e272      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 8087 	beq.w	80034ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033c0:	4b92      	ldr	r3, [pc, #584]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 030c 	and.w	r3, r3, #12
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d00c      	beq.n	80033e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033cc:	4b8f      	ldr	r3, [pc, #572]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d112      	bne.n	80033fe <HAL_RCC_OscConfig+0x5e>
 80033d8:	4b8c      	ldr	r3, [pc, #560]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e4:	d10b      	bne.n	80033fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e6:	4b89      	ldr	r3, [pc, #548]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d06c      	beq.n	80034cc <HAL_RCC_OscConfig+0x12c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d168      	bne.n	80034cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e24c      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003406:	d106      	bne.n	8003416 <HAL_RCC_OscConfig+0x76>
 8003408:	4b80      	ldr	r3, [pc, #512]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a7f      	ldr	r2, [pc, #508]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 800340e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	e02e      	b.n	8003474 <HAL_RCC_OscConfig+0xd4>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0x98>
 800341e:	4b7b      	ldr	r3, [pc, #492]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a7a      	ldr	r2, [pc, #488]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4b78      	ldr	r3, [pc, #480]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a77      	ldr	r2, [pc, #476]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003430:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e01d      	b.n	8003474 <HAL_RCC_OscConfig+0xd4>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003440:	d10c      	bne.n	800345c <HAL_RCC_OscConfig+0xbc>
 8003442:	4b72      	ldr	r3, [pc, #456]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a71      	ldr	r2, [pc, #452]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4b6f      	ldr	r3, [pc, #444]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a6e      	ldr	r2, [pc, #440]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e00b      	b.n	8003474 <HAL_RCC_OscConfig+0xd4>
 800345c:	4b6b      	ldr	r3, [pc, #428]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a6a      	ldr	r2, [pc, #424]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b68      	ldr	r3, [pc, #416]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a67      	ldr	r2, [pc, #412]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 800346e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003472:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d013      	beq.n	80034a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7ff f936 	bl	80026ec <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003484:	f7ff f932 	bl	80026ec <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	@ 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e200      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	4b5d      	ldr	r3, [pc, #372]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0xe4>
 80034a2:	e014      	b.n	80034ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7ff f922 	bl	80026ec <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ac:	f7ff f91e 	bl	80026ec <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	@ 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e1ec      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034be:	4b53      	ldr	r3, [pc, #332]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x10c>
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d063      	beq.n	80035a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034da:	4b4c      	ldr	r3, [pc, #304]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034e6:	4b49      	ldr	r3, [pc, #292]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d11c      	bne.n	800352c <HAL_RCC_OscConfig+0x18c>
 80034f2:	4b46      	ldr	r3, [pc, #280]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d116      	bne.n	800352c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fe:	4b43      	ldr	r3, [pc, #268]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_RCC_OscConfig+0x176>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d001      	beq.n	8003516 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e1c0      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003516:	4b3d      	ldr	r3, [pc, #244]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4939      	ldr	r1, [pc, #228]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352a:	e03a      	b.n	80035a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d020      	beq.n	8003576 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003534:	4b36      	ldr	r3, [pc, #216]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7ff f8d7 	bl	80026ec <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003542:	f7ff f8d3 	bl	80026ec <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e1a1      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003554:	4b2d      	ldr	r3, [pc, #180]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003560:	4b2a      	ldr	r3, [pc, #168]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4927      	ldr	r1, [pc, #156]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003570:	4313      	orrs	r3, r2
 8003572:	600b      	str	r3, [r1, #0]
 8003574:	e015      	b.n	80035a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003576:	4b26      	ldr	r3, [pc, #152]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7ff f8b6 	bl	80026ec <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003584:	f7ff f8b2 	bl	80026ec <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e180      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003596:	4b1d      	ldr	r3, [pc, #116]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d03a      	beq.n	8003624 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d019      	beq.n	80035ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b6:	4b17      	ldr	r3, [pc, #92]	@ (8003614 <HAL_RCC_OscConfig+0x274>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035bc:	f7ff f896 	bl	80026ec <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c4:	f7ff f892 	bl	80026ec <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e160      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d6:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035e2:	2001      	movs	r0, #1
 80035e4:	f000 face 	bl	8003b84 <RCC_Delay>
 80035e8:	e01c      	b.n	8003624 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003614 <HAL_RCC_OscConfig+0x274>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f0:	f7ff f87c 	bl	80026ec <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f6:	e00f      	b.n	8003618 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f8:	f7ff f878 	bl	80026ec <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d908      	bls.n	8003618 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e146      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
 800360a:	bf00      	nop
 800360c:	40021000 	.word	0x40021000
 8003610:	42420000 	.word	0x42420000
 8003614:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003618:	4b92      	ldr	r3, [pc, #584]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e9      	bne.n	80035f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80a6 	beq.w	800377e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003632:	2300      	movs	r3, #0
 8003634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003636:	4b8b      	ldr	r3, [pc, #556]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10d      	bne.n	800365e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003642:	4b88      	ldr	r3, [pc, #544]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	4a87      	ldr	r2, [pc, #540]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800364c:	61d3      	str	r3, [r2, #28]
 800364e:	4b85      	ldr	r3, [pc, #532]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800365a:	2301      	movs	r3, #1
 800365c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365e:	4b82      	ldr	r3, [pc, #520]	@ (8003868 <HAL_RCC_OscConfig+0x4c8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d118      	bne.n	800369c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800366a:	4b7f      	ldr	r3, [pc, #508]	@ (8003868 <HAL_RCC_OscConfig+0x4c8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a7e      	ldr	r2, [pc, #504]	@ (8003868 <HAL_RCC_OscConfig+0x4c8>)
 8003670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003676:	f7ff f839 	bl	80026ec <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367e:	f7ff f835 	bl	80026ec <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b64      	cmp	r3, #100	@ 0x64
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e103      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003690:	4b75      	ldr	r3, [pc, #468]	@ (8003868 <HAL_RCC_OscConfig+0x4c8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d106      	bne.n	80036b2 <HAL_RCC_OscConfig+0x312>
 80036a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6213      	str	r3, [r2, #32]
 80036b0:	e02d      	b.n	800370e <HAL_RCC_OscConfig+0x36e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10c      	bne.n	80036d4 <HAL_RCC_OscConfig+0x334>
 80036ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	4a69      	ldr	r2, [pc, #420]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	6213      	str	r3, [r2, #32]
 80036c6:	4b67      	ldr	r3, [pc, #412]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	4a66      	ldr	r2, [pc, #408]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	f023 0304 	bic.w	r3, r3, #4
 80036d0:	6213      	str	r3, [r2, #32]
 80036d2:	e01c      	b.n	800370e <HAL_RCC_OscConfig+0x36e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	2b05      	cmp	r3, #5
 80036da:	d10c      	bne.n	80036f6 <HAL_RCC_OscConfig+0x356>
 80036dc:	4b61      	ldr	r3, [pc, #388]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	4a60      	ldr	r2, [pc, #384]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036e2:	f043 0304 	orr.w	r3, r3, #4
 80036e6:	6213      	str	r3, [r2, #32]
 80036e8:	4b5e      	ldr	r3, [pc, #376]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	4a5d      	ldr	r2, [pc, #372]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	6213      	str	r3, [r2, #32]
 80036f4:	e00b      	b.n	800370e <HAL_RCC_OscConfig+0x36e>
 80036f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	4a5a      	ldr	r2, [pc, #360]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	6213      	str	r3, [r2, #32]
 8003702:	4b58      	ldr	r3, [pc, #352]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	4a57      	ldr	r2, [pc, #348]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	f023 0304 	bic.w	r3, r3, #4
 800370c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d015      	beq.n	8003742 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003716:	f7fe ffe9 	bl	80026ec <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371c:	e00a      	b.n	8003734 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7fe ffe5 	bl	80026ec <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e0b1      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003734:	4b4b      	ldr	r3, [pc, #300]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ee      	beq.n	800371e <HAL_RCC_OscConfig+0x37e>
 8003740:	e014      	b.n	800376c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003742:	f7fe ffd3 	bl	80026ec <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003748:	e00a      	b.n	8003760 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374a:	f7fe ffcf 	bl	80026ec <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003758:	4293      	cmp	r3, r2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e09b      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003760:	4b40      	ldr	r3, [pc, #256]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1ee      	bne.n	800374a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800376c:	7dfb      	ldrb	r3, [r7, #23]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d105      	bne.n	800377e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003772:	4b3c      	ldr	r3, [pc, #240]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	4a3b      	ldr	r2, [pc, #236]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003778:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800377c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 8087 	beq.w	8003896 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003788:	4b36      	ldr	r3, [pc, #216]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b08      	cmp	r3, #8
 8003792:	d061      	beq.n	8003858 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d146      	bne.n	800382a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379c:	4b33      	ldr	r3, [pc, #204]	@ (800386c <HAL_RCC_OscConfig+0x4cc>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a2:	f7fe ffa3 	bl	80026ec <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037aa:	f7fe ff9f 	bl	80026ec <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e06d      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037bc:	4b29      	ldr	r3, [pc, #164]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1f0      	bne.n	80037aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d0:	d108      	bne.n	80037e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037d2:	4b24      	ldr	r3, [pc, #144]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	4921      	ldr	r1, [pc, #132]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a19      	ldr	r1, [r3, #32]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	430b      	orrs	r3, r1
 80037f6:	491b      	ldr	r1, [pc, #108]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037fc:	4b1b      	ldr	r3, [pc, #108]	@ (800386c <HAL_RCC_OscConfig+0x4cc>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003802:	f7fe ff73 	bl	80026ec <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380a:	f7fe ff6f 	bl	80026ec <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e03d      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800381c:	4b11      	ldr	r3, [pc, #68]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x46a>
 8003828:	e035      	b.n	8003896 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382a:	4b10      	ldr	r3, [pc, #64]	@ (800386c <HAL_RCC_OscConfig+0x4cc>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7fe ff5c 	bl	80026ec <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe ff58 	bl	80026ec <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e026      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x498>
 8003856:	e01e      	b.n	8003896 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d107      	bne.n	8003870 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e019      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
 8003864:	40021000 	.word	0x40021000
 8003868:	40007000 	.word	0x40007000
 800386c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003870:	4b0b      	ldr	r3, [pc, #44]	@ (80038a0 <HAL_RCC_OscConfig+0x500>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	429a      	cmp	r2, r3
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d001      	beq.n	8003896 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000

080038a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0d0      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d910      	bls.n	80038e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b67      	ldr	r3, [pc, #412]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 0207 	bic.w	r2, r3, #7
 80038ce:	4965      	ldr	r1, [pc, #404]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d6:	4b63      	ldr	r3, [pc, #396]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d001      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0b8      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d020      	beq.n	8003936 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003900:	4b59      	ldr	r3, [pc, #356]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4a58      	ldr	r2, [pc, #352]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800390a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003918:	4b53      	ldr	r3, [pc, #332]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	4a52      	ldr	r2, [pc, #328]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003922:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003924:	4b50      	ldr	r3, [pc, #320]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	494d      	ldr	r1, [pc, #308]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	4313      	orrs	r3, r2
 8003934:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d040      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d107      	bne.n	800395a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	4b47      	ldr	r3, [pc, #284]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d115      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e07f      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003962:	4b41      	ldr	r3, [pc, #260]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e073      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003972:	4b3d      	ldr	r3, [pc, #244]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e06b      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003982:	4b39      	ldr	r3, [pc, #228]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f023 0203 	bic.w	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	4936      	ldr	r1, [pc, #216]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003994:	f7fe feaa 	bl	80026ec <HAL_GetTick>
 8003998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399c:	f7fe fea6 	bl	80026ec <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e053      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f003 020c 	and.w	r2, r3, #12
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d1eb      	bne.n	800399c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039c4:	4b27      	ldr	r3, [pc, #156]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d210      	bcs.n	80039f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b24      	ldr	r3, [pc, #144]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 0207 	bic.w	r2, r3, #7
 80039da:	4922      	ldr	r1, [pc, #136]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b20      	ldr	r3, [pc, #128]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e032      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a00:	4b19      	ldr	r3, [pc, #100]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4916      	ldr	r1, [pc, #88]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a1e:	4b12      	ldr	r3, [pc, #72]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	490e      	ldr	r1, [pc, #56]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a32:	f000 f821 	bl	8003a78 <HAL_RCC_GetSysClockFreq>
 8003a36:	4602      	mov	r2, r0
 8003a38:	4b0b      	ldr	r3, [pc, #44]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	490a      	ldr	r1, [pc, #40]	@ (8003a6c <HAL_RCC_ClockConfig+0x1c8>)
 8003a44:	5ccb      	ldrb	r3, [r1, r3]
 8003a46:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4a:	4a09      	ldr	r2, [pc, #36]	@ (8003a70 <HAL_RCC_ClockConfig+0x1cc>)
 8003a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a4e:	4b09      	ldr	r3, [pc, #36]	@ (8003a74 <HAL_RCC_ClockConfig+0x1d0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe fe08 	bl	8002668 <HAL_InitTick>

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40022000 	.word	0x40022000
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	0800506c 	.word	0x0800506c
 8003a70:	20000000 	.word	0x20000000
 8003a74:	20000004 	.word	0x20000004

08003a78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a92:	4b1e      	ldr	r3, [pc, #120]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x94>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d002      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x30>
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d003      	beq.n	8003aae <HAL_RCC_GetSysClockFreq+0x36>
 8003aa6:	e027      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003aa8:	4b19      	ldr	r3, [pc, #100]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aaa:	613b      	str	r3, [r7, #16]
      break;
 8003aac:	e027      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	0c9b      	lsrs	r3, r3, #18
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	4a17      	ldr	r2, [pc, #92]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ab8:	5cd3      	ldrb	r3, [r2, r3]
 8003aba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d010      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ac6:	4b11      	ldr	r3, [pc, #68]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	0c5b      	lsrs	r3, r3, #17
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	4a11      	ldr	r2, [pc, #68]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ad2:	5cd3      	ldrb	r3, [r2, r3]
 8003ad4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ada:	fb03 f202 	mul.w	r2, r3, r2
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	e004      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a0c      	ldr	r2, [pc, #48]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003aec:	fb02 f303 	mul.w	r3, r2, r3
 8003af0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	613b      	str	r3, [r7, #16]
      break;
 8003af6:	e002      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003af8:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x98>)
 8003afa:	613b      	str	r3, [r7, #16]
      break;
 8003afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003afe:	693b      	ldr	r3, [r7, #16]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	007a1200 	.word	0x007a1200
 8003b14:	08005094 	.word	0x08005094
 8003b18:	080050a4 	.word	0x080050a4
 8003b1c:	003d0900 	.word	0x003d0900

08003b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b24:	4b02      	ldr	r3, [pc, #8]	@ (8003b30 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr
 8003b30:	20000000 	.word	0x20000000

08003b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b38:	f7ff fff2 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4b05      	ldr	r3, [pc, #20]	@ (8003b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	4903      	ldr	r1, [pc, #12]	@ (8003b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b4a:	5ccb      	ldrb	r3, [r1, r3]
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40021000 	.word	0x40021000
 8003b58:	0800507c 	.word	0x0800507c

08003b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b60:	f7ff ffde 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b64:	4602      	mov	r2, r0
 8003b66:	4b05      	ldr	r3, [pc, #20]	@ (8003b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	0adb      	lsrs	r3, r3, #11
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	4903      	ldr	r1, [pc, #12]	@ (8003b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b72:	5ccb      	ldrb	r3, [r1, r3]
 8003b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	0800507c 	.word	0x0800507c

08003b84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb8 <RCC_Delay+0x34>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0a      	ldr	r2, [pc, #40]	@ (8003bbc <RCC_Delay+0x38>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	0a5b      	lsrs	r3, r3, #9
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ba0:	bf00      	nop
  }
  while (Delay --);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1e5a      	subs	r2, r3, #1
 8003ba6:	60fa      	str	r2, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f9      	bne.n	8003ba0 <RCC_Delay+0x1c>
}
 8003bac:	bf00      	nop
 8003bae:	bf00      	nop
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr
 8003bb8:	20000000 	.word	0x20000000
 8003bbc:	10624dd3 	.word	0x10624dd3

08003bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d07d      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be0:	4b4f      	ldr	r3, [pc, #316]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10d      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bec:	4b4c      	ldr	r3, [pc, #304]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	4a4b      	ldr	r2, [pc, #300]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf6:	61d3      	str	r3, [r2, #28]
 8003bf8:	4b49      	ldr	r3, [pc, #292]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c04:	2301      	movs	r3, #1
 8003c06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c08:	4b46      	ldr	r3, [pc, #280]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d118      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c14:	4b43      	ldr	r3, [pc, #268]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a42      	ldr	r2, [pc, #264]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c20:	f7fe fd64 	bl	80026ec <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c26:	e008      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c28:	f7fe fd60 	bl	80026ec <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b64      	cmp	r3, #100	@ 0x64
 8003c34:	d901      	bls.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e06d      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c46:	4b36      	ldr	r3, [pc, #216]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d02e      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d027      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c64:	4b2e      	ldr	r3, [pc, #184]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c74:	4b2c      	ldr	r3, [pc, #176]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c7a:	4a29      	ldr	r2, [pc, #164]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d014      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8a:	f7fe fd2f 	bl	80026ec <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fe fd2b 	bl	80026ec <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e036      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ee      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4917      	ldr	r1, [pc, #92]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d105      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ccc:	4b14      	ldr	r3, [pc, #80]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	4a13      	ldr	r2, [pc, #76]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	490b      	ldr	r1, [pc, #44]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0310 	and.w	r3, r3, #16
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d02:	4b07      	ldr	r3, [pc, #28]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	4904      	ldr	r1, [pc, #16]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40007000 	.word	0x40007000
 8003d28:	42420440 	.word	0x42420440

08003d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e041      	b.n	8003dc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fe f876 	bl	8001e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3304      	adds	r3, #4
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	f000 fd48 	bl	8004800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d001      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e03a      	b.n	8003e5a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a18      	ldr	r2, [pc, #96]	@ (8003e64 <HAL_TIM_Base_Start_IT+0x98>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00e      	beq.n	8003e24 <HAL_TIM_Base_Start_IT+0x58>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e0e:	d009      	beq.n	8003e24 <HAL_TIM_Base_Start_IT+0x58>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a14      	ldr	r2, [pc, #80]	@ (8003e68 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d004      	beq.n	8003e24 <HAL_TIM_Base_Start_IT+0x58>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a13      	ldr	r2, [pc, #76]	@ (8003e6c <HAL_TIM_Base_Start_IT+0xa0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d111      	bne.n	8003e48 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b06      	cmp	r3, #6
 8003e34:	d010      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0201 	orr.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e46:	e007      	b.n	8003e58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr
 8003e64:	40012c00 	.word	0x40012c00
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40000800 	.word	0x40000800

08003e70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e041      	b.n	8003f06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fd ffa4 	bl	8001de4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4619      	mov	r1, r3
 8003eae:	4610      	mov	r0, r2
 8003eb0:	f000 fca6 	bl	8004800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d109      	bne.n	8003f34 <HAL_TIM_PWM_Start+0x24>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	bf14      	ite	ne
 8003f2c:	2301      	movne	r3, #1
 8003f2e:	2300      	moveq	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	e022      	b.n	8003f7a <HAL_TIM_PWM_Start+0x6a>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d109      	bne.n	8003f4e <HAL_TIM_PWM_Start+0x3e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	bf14      	ite	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	2300      	moveq	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	e015      	b.n	8003f7a <HAL_TIM_PWM_Start+0x6a>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d109      	bne.n	8003f68 <HAL_TIM_PWM_Start+0x58>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	e008      	b.n	8003f7a <HAL_TIM_PWM_Start+0x6a>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	bf14      	ite	ne
 8003f74:	2301      	movne	r3, #1
 8003f76:	2300      	moveq	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e05e      	b.n	8004040 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d104      	bne.n	8003f92 <HAL_TIM_PWM_Start+0x82>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f90:	e013      	b.n	8003fba <HAL_TIM_PWM_Start+0xaa>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d104      	bne.n	8003fa2 <HAL_TIM_PWM_Start+0x92>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fa0:	e00b      	b.n	8003fba <HAL_TIM_PWM_Start+0xaa>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d104      	bne.n	8003fb2 <HAL_TIM_PWM_Start+0xa2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fb0:	e003      	b.n	8003fba <HAL_TIM_PWM_Start+0xaa>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	6839      	ldr	r1, [r7, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fea8 	bl	8004d18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1e      	ldr	r2, [pc, #120]	@ (8004048 <HAL_TIM_PWM_Start+0x138>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d107      	bne.n	8003fe2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fe0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a18      	ldr	r2, [pc, #96]	@ (8004048 <HAL_TIM_PWM_Start+0x138>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00e      	beq.n	800400a <HAL_TIM_PWM_Start+0xfa>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ff4:	d009      	beq.n	800400a <HAL_TIM_PWM_Start+0xfa>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a14      	ldr	r2, [pc, #80]	@ (800404c <HAL_TIM_PWM_Start+0x13c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d004      	beq.n	800400a <HAL_TIM_PWM_Start+0xfa>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a12      	ldr	r2, [pc, #72]	@ (8004050 <HAL_TIM_PWM_Start+0x140>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d111      	bne.n	800402e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b06      	cmp	r3, #6
 800401a:	d010      	beq.n	800403e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402c:	e007      	b.n	800403e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40012c00 	.word	0x40012c00
 800404c:	40000400 	.word	0x40000400
 8004050:	40000800 	.word	0x40000800

08004054 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e093      	b.n	8004190 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d106      	bne.n	8004082 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7fd fe71 	bl	8001d64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2202      	movs	r2, #2
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004098:	f023 0307 	bic.w	r3, r3, #7
 800409c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3304      	adds	r3, #4
 80040a6:	4619      	mov	r1, r3
 80040a8:	4610      	mov	r0, r2
 80040aa:	f000 fba9 	bl	8004800 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d6:	f023 0303 	bic.w	r3, r3, #3
 80040da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	4313      	orrs	r3, r2
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80040f4:	f023 030c 	bic.w	r3, r3, #12
 80040f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004100:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004104:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	4313      	orrs	r3, r2
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	011a      	lsls	r2, r3, #4
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	031b      	lsls	r3, r3, #12
 8004124:	4313      	orrs	r3, r2
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004132:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	4313      	orrs	r3, r2
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80041c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d110      	bne.n	80041ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d102      	bne.n	80041d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80041ce:	7b7b      	ldrb	r3, [r7, #13]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d001      	beq.n	80041d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e069      	b.n	80042ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041e8:	e031      	b.n	800424e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d110      	bne.n	8004212 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041f0:	7bbb      	ldrb	r3, [r7, #14]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d102      	bne.n	80041fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041f6:	7b3b      	ldrb	r3, [r7, #12]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d001      	beq.n	8004200 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e055      	b.n	80042ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004210:	e01d      	b.n	800424e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d108      	bne.n	800422a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004218:	7bbb      	ldrb	r3, [r7, #14]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d105      	bne.n	800422a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800421e:	7b7b      	ldrb	r3, [r7, #13]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d102      	bne.n	800422a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004224:	7b3b      	ldrb	r3, [r7, #12]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d001      	beq.n	800422e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e03e      	b.n	80042ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2202      	movs	r2, #2
 800424a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_TIM_Encoder_Start+0xc4>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b04      	cmp	r3, #4
 8004258:	d008      	beq.n	800426c <HAL_TIM_Encoder_Start+0xd4>
 800425a:	e00f      	b.n	800427c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2201      	movs	r2, #1
 8004262:	2100      	movs	r1, #0
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fd57 	bl	8004d18 <TIM_CCxChannelCmd>
      break;
 800426a:	e016      	b.n	800429a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2201      	movs	r2, #1
 8004272:	2104      	movs	r1, #4
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fd4f 	bl	8004d18 <TIM_CCxChannelCmd>
      break;
 800427a:	e00e      	b.n	800429a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2201      	movs	r2, #1
 8004282:	2100      	movs	r1, #0
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fd47 	bl	8004d18 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2201      	movs	r2, #1
 8004290:	2104      	movs	r1, #4
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fd40 	bl	8004d18 <TIM_CCxChannelCmd>
      break;
 8004298:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0201 	orr.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d020      	beq.n	8004318 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01b      	beq.n	8004318 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0202 	mvn.w	r2, #2
 80042e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fa63 	bl	80047ca <HAL_TIM_IC_CaptureCallback>
 8004304:	e005      	b.n	8004312 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fa56 	bl	80047b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fa65 	bl	80047dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	d020      	beq.n	8004364 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01b      	beq.n	8004364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0204 	mvn.w	r2, #4
 8004334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fa3d 	bl	80047ca <HAL_TIM_IC_CaptureCallback>
 8004350:	e005      	b.n	800435e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fa30 	bl	80047b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fa3f 	bl	80047dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d020      	beq.n	80043b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01b      	beq.n	80043b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0208 	mvn.w	r2, #8
 8004380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2204      	movs	r2, #4
 8004386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fa17 	bl	80047ca <HAL_TIM_IC_CaptureCallback>
 800439c:	e005      	b.n	80043aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fa0a 	bl	80047b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fa19 	bl	80047dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d020      	beq.n	80043fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01b      	beq.n	80043fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0210 	mvn.w	r2, #16
 80043cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2208      	movs	r2, #8
 80043d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f9f1 	bl	80047ca <HAL_TIM_IC_CaptureCallback>
 80043e8:	e005      	b.n	80043f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f9e4 	bl	80047b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f9f3 	bl	80047dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00c      	beq.n	8004420 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0201 	mvn.w	r2, #1
 8004418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f9c3 	bl	80047a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00c      	beq.n	8004444 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800443c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fcf5 	bl	8004e2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00c      	beq.n	8004468 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f9c3 	bl	80047ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0320 	and.w	r3, r3, #32
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00c      	beq.n	800448c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b00      	cmp	r3, #0
 800447a:	d007      	beq.n	800448c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0220 	mvn.w	r2, #32
 8004484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fcc8 	bl	8004e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e0ae      	b.n	8004610 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b0c      	cmp	r3, #12
 80044be:	f200 809f 	bhi.w	8004600 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044c2:	a201      	add	r2, pc, #4	@ (adr r2, 80044c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c8:	080044fd 	.word	0x080044fd
 80044cc:	08004601 	.word	0x08004601
 80044d0:	08004601 	.word	0x08004601
 80044d4:	08004601 	.word	0x08004601
 80044d8:	0800453d 	.word	0x0800453d
 80044dc:	08004601 	.word	0x08004601
 80044e0:	08004601 	.word	0x08004601
 80044e4:	08004601 	.word	0x08004601
 80044e8:	0800457f 	.word	0x0800457f
 80044ec:	08004601 	.word	0x08004601
 80044f0:	08004601 	.word	0x08004601
 80044f4:	08004601 	.word	0x08004601
 80044f8:	080045bf 	.word	0x080045bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68b9      	ldr	r1, [r7, #8]
 8004502:	4618      	mov	r0, r3
 8004504:	f000 f9ea 	bl	80048dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0208 	orr.w	r2, r2, #8
 8004516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0204 	bic.w	r2, r2, #4
 8004526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6999      	ldr	r1, [r3, #24]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	619a      	str	r2, [r3, #24]
      break;
 800453a:	e064      	b.n	8004606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fa30 	bl	80049a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6999      	ldr	r1, [r3, #24]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	021a      	lsls	r2, r3, #8
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	619a      	str	r2, [r3, #24]
      break;
 800457c:	e043      	b.n	8004606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fa79 	bl	8004a7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0208 	orr.w	r2, r2, #8
 8004598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69da      	ldr	r2, [r3, #28]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0204 	bic.w	r2, r2, #4
 80045a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69d9      	ldr	r1, [r3, #28]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	691a      	ldr	r2, [r3, #16]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	61da      	str	r2, [r3, #28]
      break;
 80045bc:	e023      	b.n	8004606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fac3 	bl	8004b50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69da      	ldr	r2, [r3, #28]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69da      	ldr	r2, [r3, #28]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69d9      	ldr	r1, [r3, #28]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	021a      	lsls	r2, r3, #8
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	61da      	str	r2, [r3, #28]
      break;
 80045fe:	e002      	b.n	8004606 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	75fb      	strb	r3, [r7, #23]
      break;
 8004604:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800460e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_TIM_ConfigClockSource+0x1c>
 8004630:	2302      	movs	r3, #2
 8004632:	e0b4      	b.n	800479e <HAL_TIM_ConfigClockSource+0x186>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800465a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800466c:	d03e      	beq.n	80046ec <HAL_TIM_ConfigClockSource+0xd4>
 800466e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004672:	f200 8087 	bhi.w	8004784 <HAL_TIM_ConfigClockSource+0x16c>
 8004676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800467a:	f000 8086 	beq.w	800478a <HAL_TIM_ConfigClockSource+0x172>
 800467e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004682:	d87f      	bhi.n	8004784 <HAL_TIM_ConfigClockSource+0x16c>
 8004684:	2b70      	cmp	r3, #112	@ 0x70
 8004686:	d01a      	beq.n	80046be <HAL_TIM_ConfigClockSource+0xa6>
 8004688:	2b70      	cmp	r3, #112	@ 0x70
 800468a:	d87b      	bhi.n	8004784 <HAL_TIM_ConfigClockSource+0x16c>
 800468c:	2b60      	cmp	r3, #96	@ 0x60
 800468e:	d050      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0x11a>
 8004690:	2b60      	cmp	r3, #96	@ 0x60
 8004692:	d877      	bhi.n	8004784 <HAL_TIM_ConfigClockSource+0x16c>
 8004694:	2b50      	cmp	r3, #80	@ 0x50
 8004696:	d03c      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0xfa>
 8004698:	2b50      	cmp	r3, #80	@ 0x50
 800469a:	d873      	bhi.n	8004784 <HAL_TIM_ConfigClockSource+0x16c>
 800469c:	2b40      	cmp	r3, #64	@ 0x40
 800469e:	d058      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x13a>
 80046a0:	2b40      	cmp	r3, #64	@ 0x40
 80046a2:	d86f      	bhi.n	8004784 <HAL_TIM_ConfigClockSource+0x16c>
 80046a4:	2b30      	cmp	r3, #48	@ 0x30
 80046a6:	d064      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x15a>
 80046a8:	2b30      	cmp	r3, #48	@ 0x30
 80046aa:	d86b      	bhi.n	8004784 <HAL_TIM_ConfigClockSource+0x16c>
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	d060      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x15a>
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d867      	bhi.n	8004784 <HAL_TIM_ConfigClockSource+0x16c>
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d05c      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x15a>
 80046b8:	2b10      	cmp	r3, #16
 80046ba:	d05a      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x15a>
 80046bc:	e062      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046ce:	f000 fb04 	bl	8004cda <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	609a      	str	r2, [r3, #8]
      break;
 80046ea:	e04f      	b.n	800478c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046fc:	f000 faed 	bl	8004cda <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800470e:	609a      	str	r2, [r3, #8]
      break;
 8004710:	e03c      	b.n	800478c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800471e:	461a      	mov	r2, r3
 8004720:	f000 fa64 	bl	8004bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2150      	movs	r1, #80	@ 0x50
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fabb 	bl	8004ca6 <TIM_ITRx_SetConfig>
      break;
 8004730:	e02c      	b.n	800478c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800473e:	461a      	mov	r2, r3
 8004740:	f000 fa82 	bl	8004c48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2160      	movs	r1, #96	@ 0x60
 800474a:	4618      	mov	r0, r3
 800474c:	f000 faab 	bl	8004ca6 <TIM_ITRx_SetConfig>
      break;
 8004750:	e01c      	b.n	800478c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800475e:	461a      	mov	r2, r3
 8004760:	f000 fa44 	bl	8004bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2140      	movs	r1, #64	@ 0x40
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fa9b 	bl	8004ca6 <TIM_ITRx_SetConfig>
      break;
 8004770:	e00c      	b.n	800478c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4619      	mov	r1, r3
 800477c:	4610      	mov	r0, r2
 800477e:	f000 fa92 	bl	8004ca6 <TIM_ITRx_SetConfig>
      break;
 8004782:	e003      	b.n	800478c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
      break;
 8004788:	e000      	b.n	800478c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800478a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800479c:	7bfb      	ldrb	r3, [r7, #15]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bc80      	pop	{r7}
 80047c8:	4770      	bx	lr

080047ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr

080047dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr

080047ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr

08004800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a2f      	ldr	r2, [pc, #188]	@ (80048d0 <TIM_Base_SetConfig+0xd0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00b      	beq.n	8004830 <TIM_Base_SetConfig+0x30>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800481e:	d007      	beq.n	8004830 <TIM_Base_SetConfig+0x30>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a2c      	ldr	r2, [pc, #176]	@ (80048d4 <TIM_Base_SetConfig+0xd4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d003      	beq.n	8004830 <TIM_Base_SetConfig+0x30>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a2b      	ldr	r2, [pc, #172]	@ (80048d8 <TIM_Base_SetConfig+0xd8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d108      	bne.n	8004842 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a22      	ldr	r2, [pc, #136]	@ (80048d0 <TIM_Base_SetConfig+0xd0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00b      	beq.n	8004862 <TIM_Base_SetConfig+0x62>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004850:	d007      	beq.n	8004862 <TIM_Base_SetConfig+0x62>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a1f      	ldr	r2, [pc, #124]	@ (80048d4 <TIM_Base_SetConfig+0xd4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d003      	beq.n	8004862 <TIM_Base_SetConfig+0x62>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a1e      	ldr	r2, [pc, #120]	@ (80048d8 <TIM_Base_SetConfig+0xd8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d108      	bne.n	8004874 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a0d      	ldr	r2, [pc, #52]	@ (80048d0 <TIM_Base_SetConfig+0xd0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d103      	bne.n	80048a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f023 0201 	bic.w	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	611a      	str	r2, [r3, #16]
  }
}
 80048c6:	bf00      	nop
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr
 80048d0:	40012c00 	.word	0x40012c00
 80048d4:	40000400 	.word	0x40000400
 80048d8:	40000800 	.word	0x40000800

080048dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f023 0201 	bic.w	r2, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800490a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0303 	bic.w	r3, r3, #3
 8004912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f023 0302 	bic.w	r3, r3, #2
 8004924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	4313      	orrs	r3, r2
 800492e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a1c      	ldr	r2, [pc, #112]	@ (80049a4 <TIM_OC1_SetConfig+0xc8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d10c      	bne.n	8004952 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f023 0308 	bic.w	r3, r3, #8
 800493e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f023 0304 	bic.w	r3, r3, #4
 8004950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a13      	ldr	r2, [pc, #76]	@ (80049a4 <TIM_OC1_SetConfig+0xc8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d111      	bne.n	800497e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	621a      	str	r2, [r3, #32]
}
 8004998:	bf00      	nop
 800499a:	371c      	adds	r7, #28
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40012c00 	.word	0x40012c00

080049a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	f023 0210 	bic.w	r2, r3, #16
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 0320 	bic.w	r3, r3, #32
 80049f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a1d      	ldr	r2, [pc, #116]	@ (8004a78 <TIM_OC2_SetConfig+0xd0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d10d      	bne.n	8004a24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a14      	ldr	r2, [pc, #80]	@ (8004a78 <TIM_OC2_SetConfig+0xd0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d113      	bne.n	8004a54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	621a      	str	r2, [r3, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr
 8004a78:	40012c00 	.word	0x40012c00

08004a7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0303 	bic.w	r3, r3, #3
 8004ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b4c <TIM_OC3_SetConfig+0xd0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d10d      	bne.n	8004af6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	021b      	lsls	r3, r3, #8
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a14      	ldr	r2, [pc, #80]	@ (8004b4c <TIM_OC3_SetConfig+0xd0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d113      	bne.n	8004b26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	621a      	str	r2, [r3, #32]
}
 8004b40:	bf00      	nop
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40012c00 	.word	0x40012c00

08004b50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	031b      	lsls	r3, r3, #12
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a0f      	ldr	r2, [pc, #60]	@ (8004be8 <TIM_OC4_SetConfig+0x98>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d109      	bne.n	8004bc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	019b      	lsls	r3, r3, #6
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	621a      	str	r2, [r3, #32]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr
 8004be8:	40012c00 	.word	0x40012c00

08004bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	f023 0201 	bic.w	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f023 030a 	bic.w	r3, r3, #10
 8004c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr

08004c48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	f023 0210 	bic.w	r2, r3, #16
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	031b      	lsls	r3, r3, #12
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c84:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	621a      	str	r2, [r3, #32]
}
 8004c9c:	bf00      	nop
 8004c9e:	371c      	adds	r7, #28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bc80      	pop	{r7}
 8004ca4:	4770      	bx	lr

08004ca6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f043 0307 	orr.w	r3, r3, #7
 8004cc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	609a      	str	r2, [r3, #8]
}
 8004cd0:	bf00      	nop
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr

08004cda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b087      	sub	sp, #28
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
 8004ce6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cf4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	021a      	lsls	r2, r3, #8
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	609a      	str	r2, [r3, #8]
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr

08004d18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a1a      	ldr	r2, [r3, #32]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	401a      	ands	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a1a      	ldr	r2, [r3, #32]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d50:	431a      	orrs	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	621a      	str	r2, [r3, #32]
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr

08004d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e046      	b.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a16      	ldr	r2, [pc, #88]	@ (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d00e      	beq.n	8004dda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc4:	d009      	beq.n	8004dda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a12      	ldr	r2, [pc, #72]	@ (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d004      	beq.n	8004dda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a10      	ldr	r2, [pc, #64]	@ (8004e18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d10c      	bne.n	8004df4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004de0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr
 8004e10:	40012c00 	.word	0x40012c00
 8004e14:	40000400 	.word	0x40000400
 8004e18:	40000800 	.word	0x40000800

08004e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr

08004e2e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e042      	b.n	8004ed8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fd f876 	bl	8001f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2224      	movs	r2, #36	@ 0x24
 8004e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f82b 	bl	8004ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695a      	ldr	r2, [r3, #20]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004f1a:	f023 030c 	bic.w	r3, r3, #12
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	68b9      	ldr	r1, [r7, #8]
 8004f24:	430b      	orrs	r3, r1
 8004f26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a2c      	ldr	r2, [pc, #176]	@ (8004ff4 <UART_SetConfig+0x114>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d103      	bne.n	8004f50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f48:	f7fe fe08 	bl	8003b5c <HAL_RCC_GetPCLK2Freq>
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	e002      	b.n	8004f56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f50:	f7fe fdf0 	bl	8003b34 <HAL_RCC_GetPCLK1Freq>
 8004f54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009a      	lsls	r2, r3, #2
 8004f60:	441a      	add	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6c:	4a22      	ldr	r2, [pc, #136]	@ (8004ff8 <UART_SetConfig+0x118>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	0119      	lsls	r1, r3, #4
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009a      	lsls	r2, r3, #2
 8004f80:	441a      	add	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff8 <UART_SetConfig+0x118>)
 8004f8e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	2064      	movs	r0, #100	@ 0x64
 8004f96:	fb00 f303 	mul.w	r3, r0, r3
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	3332      	adds	r3, #50	@ 0x32
 8004fa0:	4a15      	ldr	r2, [pc, #84]	@ (8004ff8 <UART_SetConfig+0x118>)
 8004fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fac:	4419      	add	r1, r3
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009a      	lsls	r2, r3, #2
 8004fb8:	441a      	add	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff8 <UART_SetConfig+0x118>)
 8004fc6:	fba3 0302 	umull	r0, r3, r3, r2
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	2064      	movs	r0, #100	@ 0x64
 8004fce:	fb00 f303 	mul.w	r3, r0, r3
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	3332      	adds	r3, #50	@ 0x32
 8004fd8:	4a07      	ldr	r2, [pc, #28]	@ (8004ff8 <UART_SetConfig+0x118>)
 8004fda:	fba2 2303 	umull	r2, r3, r2, r3
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	f003 020f 	and.w	r2, r3, #15
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	440a      	add	r2, r1
 8004fea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004fec:	bf00      	nop
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40013800 	.word	0x40013800
 8004ff8:	51eb851f 	.word	0x51eb851f

08004ffc <memset>:
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	4402      	add	r2, r0
 8005000:	4293      	cmp	r3, r2
 8005002:	d100      	bne.n	8005006 <memset+0xa>
 8005004:	4770      	bx	lr
 8005006:	f803 1b01 	strb.w	r1, [r3], #1
 800500a:	e7f9      	b.n	8005000 <memset+0x4>

0800500c <__libc_init_array>:
 800500c:	b570      	push	{r4, r5, r6, lr}
 800500e:	2600      	movs	r6, #0
 8005010:	4d0c      	ldr	r5, [pc, #48]	@ (8005044 <__libc_init_array+0x38>)
 8005012:	4c0d      	ldr	r4, [pc, #52]	@ (8005048 <__libc_init_array+0x3c>)
 8005014:	1b64      	subs	r4, r4, r5
 8005016:	10a4      	asrs	r4, r4, #2
 8005018:	42a6      	cmp	r6, r4
 800501a:	d109      	bne.n	8005030 <__libc_init_array+0x24>
 800501c:	f000 f81a 	bl	8005054 <_init>
 8005020:	2600      	movs	r6, #0
 8005022:	4d0a      	ldr	r5, [pc, #40]	@ (800504c <__libc_init_array+0x40>)
 8005024:	4c0a      	ldr	r4, [pc, #40]	@ (8005050 <__libc_init_array+0x44>)
 8005026:	1b64      	subs	r4, r4, r5
 8005028:	10a4      	asrs	r4, r4, #2
 800502a:	42a6      	cmp	r6, r4
 800502c:	d105      	bne.n	800503a <__libc_init_array+0x2e>
 800502e:	bd70      	pop	{r4, r5, r6, pc}
 8005030:	f855 3b04 	ldr.w	r3, [r5], #4
 8005034:	4798      	blx	r3
 8005036:	3601      	adds	r6, #1
 8005038:	e7ee      	b.n	8005018 <__libc_init_array+0xc>
 800503a:	f855 3b04 	ldr.w	r3, [r5], #4
 800503e:	4798      	blx	r3
 8005040:	3601      	adds	r6, #1
 8005042:	e7f2      	b.n	800502a <__libc_init_array+0x1e>
 8005044:	080050a8 	.word	0x080050a8
 8005048:	080050a8 	.word	0x080050a8
 800504c:	080050a8 	.word	0x080050a8
 8005050:	080050ac 	.word	0x080050ac

08005054 <_init>:
 8005054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005056:	bf00      	nop
 8005058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505a:	bc08      	pop	{r3}
 800505c:	469e      	mov	lr, r3
 800505e:	4770      	bx	lr

08005060 <_fini>:
 8005060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005062:	bf00      	nop
 8005064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005066:	bc08      	pop	{r3}
 8005068:	469e      	mov	lr, r3
 800506a:	4770      	bx	lr
